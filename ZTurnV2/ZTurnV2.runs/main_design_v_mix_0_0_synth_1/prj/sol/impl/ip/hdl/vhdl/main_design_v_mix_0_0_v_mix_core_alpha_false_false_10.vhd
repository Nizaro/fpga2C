-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_design_v_mix_0_0_v_mix_core_alpha_false_false_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    outLayer1_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    outLayer1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer1_empty_n : IN STD_LOGIC;
    outLayer1_read : OUT STD_LOGIC;
    srcLayer2x_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    srcLayer2x_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    srcLayer2x_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    srcLayer2x_empty_n : IN STD_LOGIC;
    srcLayer2x_read : OUT STD_LOGIC;
    hwReg_0_val : IN STD_LOGIC_VECTOR (11 downto 0);
    hwReg_1_val : IN STD_LOGIC_VECTOR (11 downto 0);
    hwReg_6_val_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    hwReg_6_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    hwReg_6_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    hwReg_6_val_empty_n : IN STD_LOGIC;
    hwReg_6_val_read : OUT STD_LOGIC;
    hwReg_9_2_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    hwReg_9_2_val_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    hwReg_9_2_val_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    hwReg_9_2_val_empty_n : IN STD_LOGIC;
    hwReg_9_2_val_read : OUT STD_LOGIC;
    hwReg_10_2_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    hwReg_10_2_val_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    hwReg_10_2_val_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    hwReg_10_2_val_empty_n : IN STD_LOGIC;
    hwReg_10_2_val_read : OUT STD_LOGIC;
    hwReg_11_2_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    hwReg_11_2_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    hwReg_11_2_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    hwReg_11_2_val_empty_n : IN STD_LOGIC;
    hwReg_11_2_val_read : OUT STD_LOGIC;
    hwReg_12_2_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    hwReg_12_2_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    hwReg_12_2_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    hwReg_12_2_val_empty_n : IN STD_LOGIC;
    hwReg_12_2_val_read : OUT STD_LOGIC;
    hwReg_13_2_val_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    hwReg_13_2_val_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    hwReg_13_2_val_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    hwReg_13_2_val_empty_n : IN STD_LOGIC;
    hwReg_13_2_val_read : OUT STD_LOGIC;
    outLayer2_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    outLayer2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer2_full_n : IN STD_LOGIC;
    outLayer2_write : OUT STD_LOGIC );
end;


architecture behav of main_design_v_mix_0_0_v_mix_core_alpha_false_false_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal hwReg_6_val_blk_n : STD_LOGIC;
    signal hwReg_9_2_val_blk_n : STD_LOGIC;
    signal hwReg_10_2_val_blk_n : STD_LOGIC;
    signal hwReg_11_2_val_blk_n : STD_LOGIC;
    signal hwReg_12_2_val_blk_n : STD_LOGIC;
    signal hwReg_13_2_val_blk_n : STD_LOGIC;
    signal layerStartY_reg_257 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal layerStartX_reg_263 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln449_fu_152_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln449_reg_269 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln450_fu_162_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln450_reg_274 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_279 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add60_fu_187_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add60_reg_294 : STD_LOGIC_VECTOR (16 downto 0);
    signal add71_fu_199_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add71_reg_299 : STD_LOGIC_VECTOR (16 downto 0);
    signal rev12_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev12_reg_307 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal notrhs_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_done : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_idle : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_ready : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer1_read : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_srcLayer2x_read : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_din : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_write : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln463_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_fu_80 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln463_fu_213_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal hwReg_13_2_val_read_local : STD_LOGIC;
    signal hwReg_12_2_val_read_local : STD_LOGIC;
    signal hwReg_11_2_val_read_local : STD_LOGIC;
    signal hwReg_10_2_val_read_local : STD_LOGIC;
    signal hwReg_9_2_val_read_local : STD_LOGIC;
    signal hwReg_6_val_read_local : STD_LOGIC;
    signal hwReg_13_2_val_readcast_fu_148_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal hwReg_13_2_val_readcast13_fu_158_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerHeight_cast_fu_184_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal hwReg_10_2_val_cast_fu_181_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal layerWidth_cast_fu_196_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal hwReg_9_2_val_cast_fu_193_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln463_1_fu_223_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ult_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln463_fu_219_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_design_v_mix_0_0_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outLayer1_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        outLayer1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        outLayer1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        outLayer1_empty_n : IN STD_LOGIC;
        outLayer1_read : OUT STD_LOGIC;
        srcLayer2x_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        srcLayer2x_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        srcLayer2x_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        srcLayer2x_empty_n : IN STD_LOGIC;
        srcLayer2x_read : OUT STD_LOGIC;
        outLayer2_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        outLayer2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        outLayer2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        outLayer2_full_n : IN STD_LOGIC;
        outLayer2_write : OUT STD_LOGIC;
        hwReg_0_val : IN STD_LOGIC_VECTOR (11 downto 0);
        layerStartX : IN STD_LOGIC_VECTOR (15 downto 0);
        add71 : IN STD_LOGIC_VECTOR (16 downto 0);
        notrhs : IN STD_LOGIC_VECTOR (0 downto 0);
        rev5 : IN STD_LOGIC_VECTOR (0 downto 0);
        empty : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132 : component main_design_v_mix_0_0_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start,
        ap_done => grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_done,
        ap_idle => grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_idle,
        ap_ready => grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_ready,
        outLayer1_dout => outLayer1_dout,
        outLayer1_num_data_valid => ap_const_lv3_0,
        outLayer1_fifo_cap => ap_const_lv3_0,
        outLayer1_empty_n => outLayer1_empty_n,
        outLayer1_read => grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer1_read,
        srcLayer2x_dout => srcLayer2x_dout,
        srcLayer2x_num_data_valid => ap_const_lv3_0,
        srcLayer2x_fifo_cap => ap_const_lv3_0,
        srcLayer2x_empty_n => srcLayer2x_empty_n,
        srcLayer2x_read => grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_srcLayer2x_read,
        outLayer2_din => grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_din,
        outLayer2_num_data_valid => ap_const_lv3_0,
        outLayer2_fifo_cap => ap_const_lv3_0,
        outLayer2_full_n => outLayer2_full_n,
        outLayer2_write => grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_write,
        hwReg_0_val => hwReg_0_val,
        layerStartX => layerStartX_reg_263,
        add71 => add71_reg_299,
        notrhs => notrhs_reg_312,
        rev5 => rev12_reg_307,
        empty => tmp_5_reg_279);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_208_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_208_p2 = ap_const_lv1_0))) then 
                    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_ready = ap_const_logic_1)) then 
                    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    y_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                y_fu_80 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_208_p2 = ap_const_lv1_0))) then 
                y_fu_80 <= add_ln463_fu_213_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add60_reg_294 <= add60_fu_187_p2;
                add71_reg_299 <= add71_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                layerStartX_reg_263 <= hwReg_9_2_val_dout;
                layerStartY_reg_257 <= hwReg_10_2_val_dout;
                shl_ln449_reg_269 <= shl_ln449_fu_152_p2;
                shl_ln450_reg_274 <= shl_ln450_fu_162_p2;
                tmp_5_reg_279 <= hwReg_6_val_dout(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                notrhs_reg_312 <= notrhs_fu_239_p2;
                rev12_reg_307 <= rev12_fu_232_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, ap_CS_fsm_state3, grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_done, icmp_ln463_fu_208_p2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_208_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add60_fu_187_p2 <= std_logic_vector(unsigned(layerHeight_cast_fu_184_p1) + unsigned(hwReg_10_2_val_cast_fu_181_p1));
    add71_fu_199_p2 <= std_logic_vector(unsigned(layerWidth_cast_fu_196_p1) + unsigned(hwReg_9_2_val_cast_fu_193_p1));
    add_ln463_fu_213_p2 <= std_logic_vector(unsigned(y_fu_80) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_done)
    begin
        if ((grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, hwReg_6_val_empty_n, hwReg_9_2_val_empty_n, hwReg_10_2_val_empty_n, hwReg_11_2_val_empty_n, hwReg_12_2_val_empty_n, hwReg_13_2_val_empty_n)
    begin
                ap_block_state1 <= ((hwReg_13_2_val_empty_n = ap_const_logic_0) or (hwReg_12_2_val_empty_n = ap_const_logic_0) or (hwReg_11_2_val_empty_n = ap_const_logic_0) or (hwReg_10_2_val_empty_n = ap_const_logic_0) or (hwReg_9_2_val_empty_n = ap_const_logic_0) or (hwReg_6_val_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, icmp_ln463_fu_208_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_208_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start <= grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg;

    hwReg_10_2_val_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hwReg_10_2_val_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hwReg_10_2_val_blk_n <= hwReg_10_2_val_empty_n;
        else 
            hwReg_10_2_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hwReg_10_2_val_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layerStartY_reg_257),17));
    hwReg_10_2_val_read <= hwReg_10_2_val_read_local;

    hwReg_10_2_val_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            hwReg_10_2_val_read_local <= ap_const_logic_1;
        else 
            hwReg_10_2_val_read_local <= ap_const_logic_0;
        end if; 
    end process;


    hwReg_11_2_val_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hwReg_11_2_val_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hwReg_11_2_val_blk_n <= hwReg_11_2_val_empty_n;
        else 
            hwReg_11_2_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hwReg_11_2_val_read <= hwReg_11_2_val_read_local;

    hwReg_11_2_val_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            hwReg_11_2_val_read_local <= ap_const_logic_1;
        else 
            hwReg_11_2_val_read_local <= ap_const_logic_0;
        end if; 
    end process;


    hwReg_12_2_val_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hwReg_12_2_val_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hwReg_12_2_val_blk_n <= hwReg_12_2_val_empty_n;
        else 
            hwReg_12_2_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hwReg_12_2_val_read <= hwReg_12_2_val_read_local;

    hwReg_12_2_val_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            hwReg_12_2_val_read_local <= ap_const_logic_1;
        else 
            hwReg_12_2_val_read_local <= ap_const_logic_0;
        end if; 
    end process;


    hwReg_13_2_val_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hwReg_13_2_val_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hwReg_13_2_val_blk_n <= hwReg_13_2_val_empty_n;
        else 
            hwReg_13_2_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hwReg_13_2_val_read <= hwReg_13_2_val_read_local;

    hwReg_13_2_val_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            hwReg_13_2_val_read_local <= ap_const_logic_1;
        else 
            hwReg_13_2_val_read_local <= ap_const_logic_0;
        end if; 
    end process;

    hwReg_13_2_val_readcast13_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hwReg_13_2_val_dout),16));
    hwReg_13_2_val_readcast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hwReg_13_2_val_dout),16));

    hwReg_6_val_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hwReg_6_val_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hwReg_6_val_blk_n <= hwReg_6_val_empty_n;
        else 
            hwReg_6_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hwReg_6_val_read <= hwReg_6_val_read_local;

    hwReg_6_val_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            hwReg_6_val_read_local <= ap_const_logic_1;
        else 
            hwReg_6_val_read_local <= ap_const_logic_0;
        end if; 
    end process;


    hwReg_9_2_val_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hwReg_9_2_val_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hwReg_9_2_val_blk_n <= hwReg_9_2_val_empty_n;
        else 
            hwReg_9_2_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hwReg_9_2_val_cast_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layerStartX_reg_263),17));
    hwReg_9_2_val_read <= hwReg_9_2_val_read_local;

    hwReg_9_2_val_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            hwReg_9_2_val_read_local <= ap_const_logic_1;
        else 
            hwReg_9_2_val_read_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln463_fu_208_p2 <= "1" when (y_fu_80 = hwReg_1_val) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln463_fu_208_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_208_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    layerHeight_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln449_reg_269),17));
    layerWidth_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln450_reg_274),17));
    notrhs_fu_239_p2 <= "1" when (unsigned(add60_reg_294) > unsigned(zext_ln463_fu_219_p1)) else "0";

    outLayer1_read_assign_proc : process(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer1_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outLayer1_read <= grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer1_read;
        else 
            outLayer1_read <= ap_const_logic_0;
        end if; 
    end process;

    outLayer2_din <= grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_din;

    outLayer2_write_assign_proc : process(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outLayer2_write <= grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_write;
        else 
            outLayer2_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rev12_fu_232_p2 <= (ult_fu_227_p2 xor ap_const_lv1_1);
    shl_ln449_fu_152_p2 <= std_logic_vector(shift_left(unsigned(hwReg_12_2_val_dout),to_integer(unsigned('0' & hwReg_13_2_val_readcast_fu_148_p1(16-1 downto 0)))));
    shl_ln450_fu_162_p2 <= std_logic_vector(shift_left(unsigned(hwReg_11_2_val_dout),to_integer(unsigned('0' & hwReg_13_2_val_readcast13_fu_158_p1(16-1 downto 0)))));

    srcLayer2x_read_assign_proc : process(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_srcLayer2x_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            srcLayer2x_read <= grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_srcLayer2x_read;
        else 
            srcLayer2x_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    ult_fu_227_p2 <= "1" when (unsigned(zext_ln463_1_fu_223_p1) < unsigned(layerStartY_reg_257)) else "0";
    zext_ln463_1_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_80),16));
    zext_ln463_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_80),17));
end behav;
