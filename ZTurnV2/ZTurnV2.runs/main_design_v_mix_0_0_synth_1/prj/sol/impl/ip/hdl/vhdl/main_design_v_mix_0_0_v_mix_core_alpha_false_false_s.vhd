-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_design_v_mix_0_0_v_mix_core_alpha_false_false_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outLayer0_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    outLayer0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer0_empty_n : IN STD_LOGIC;
    outLayer0_read : OUT STD_LOGIC;
    srcLayer1x_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    srcLayer1x_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    srcLayer1x_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    srcLayer1x_empty_n : IN STD_LOGIC;
    srcLayer1x_read : OUT STD_LOGIC;
    HwReg_width_val : IN STD_LOGIC_VECTOR (11 downto 0);
    HwReg_height_val : IN STD_LOGIC_VECTOR (11 downto 0);
    HwReg_background_Y_R_val12 : IN STD_LOGIC_VECTOR (7 downto 0);
    HwReg_background_U_G_val13 : IN STD_LOGIC_VECTOR (7 downto 0);
    HwReg_background_V_B_val14 : IN STD_LOGIC_VECTOR (7 downto 0);
    HwReg_layerEnable_val16_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    HwReg_layerEnable_val16_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    HwReg_layerEnable_val16_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    HwReg_layerEnable_val16_empty_n : IN STD_LOGIC;
    HwReg_layerEnable_val16_read : OUT STD_LOGIC;
    HwReg_layerStartX_1_val17_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    HwReg_layerStartX_1_val17_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    HwReg_layerStartX_1_val17_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    HwReg_layerStartX_1_val17_empty_n : IN STD_LOGIC;
    HwReg_layerStartX_1_val17_read : OUT STD_LOGIC;
    HwReg_layerStartY_1_val19_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    HwReg_layerStartY_1_val19_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    HwReg_layerStartY_1_val19_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    HwReg_layerStartY_1_val19_empty_n : IN STD_LOGIC;
    HwReg_layerStartY_1_val19_read : OUT STD_LOGIC;
    HwReg_layerWidth_1_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    HwReg_layerWidth_1_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    HwReg_layerWidth_1_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    HwReg_layerWidth_1_val_empty_n : IN STD_LOGIC;
    HwReg_layerWidth_1_val_read : OUT STD_LOGIC;
    HwReg_layerHeight_1_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    HwReg_layerHeight_1_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    HwReg_layerHeight_1_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    HwReg_layerHeight_1_val_empty_n : IN STD_LOGIC;
    HwReg_layerHeight_1_val_read : OUT STD_LOGIC;
    HwReg_layerScaleFactor_1_val25_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    HwReg_layerScaleFactor_1_val25_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    HwReg_layerScaleFactor_1_val25_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    HwReg_layerScaleFactor_1_val25_empty_n : IN STD_LOGIC;
    HwReg_layerScaleFactor_1_val25_read : OUT STD_LOGIC;
    outLayer1_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    outLayer1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer1_full_n : IN STD_LOGIC;
    outLayer1_write : OUT STD_LOGIC;
    HwReg_layerEnable_val16_c_din : OUT STD_LOGIC_VECTOR (2 downto 0);
    HwReg_layerEnable_val16_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    HwReg_layerEnable_val16_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    HwReg_layerEnable_val16_c_full_n : IN STD_LOGIC;
    HwReg_layerEnable_val16_c_write : OUT STD_LOGIC );
end;


architecture behav of main_design_v_mix_0_0_v_mix_core_alpha_false_false_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal HwReg_layerEnable_val16_blk_n : STD_LOGIC;
    signal HwReg_layerStartX_1_val17_blk_n : STD_LOGIC;
    signal HwReg_layerStartY_1_val19_blk_n : STD_LOGIC;
    signal HwReg_layerWidth_1_val_blk_n : STD_LOGIC;
    signal HwReg_layerHeight_1_val_blk_n : STD_LOGIC;
    signal HwReg_layerScaleFactor_1_val25_blk_n : STD_LOGIC;
    signal HwReg_layerEnable_val16_c_blk_n : STD_LOGIC;
    signal layerStartY_reg_303 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal layerStartX_reg_309 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_190_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_315 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln449_fu_198_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln449_reg_320 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln450_fu_208_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln450_reg_325 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add60_i_fu_233_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add60_i_reg_360 : STD_LOGIC_VECTOR (16 downto 0);
    signal add71_i_fu_245_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add71_i_reg_365 : STD_LOGIC_VECTOR (16 downto 0);
    signal rev18_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev18_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal notrhs_i_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_i_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_done : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_idle : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_ready : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer0_read : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_srcLayer1x_read : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_din : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_write : STD_LOGIC;
    signal grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln463_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_fu_92 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln463_fu_259_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_layerScaleFactor_1_val25_read_local : STD_LOGIC;
    signal HwReg_layerHeight_1_val_read_local : STD_LOGIC;
    signal HwReg_layerWidth_1_val_read_local : STD_LOGIC;
    signal HwReg_layerStartY_1_val19_read_local : STD_LOGIC;
    signal HwReg_layerStartX_1_val17_read_local : STD_LOGIC;
    signal HwReg_layerEnable_val16_read_local : STD_LOGIC;
    signal HwReg_layerEnable_val16_c_write_local : STD_LOGIC;
    signal HwReg_layerScaleFactor_1_val25_readcast_fu_194_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerScaleFactor_1_val25_readcast19_fu_204_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerHeight_cast_i_fu_230_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal hwReg_10_1_val_cast_i_fu_227_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal layerWidth_cast_i_fu_242_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal hwReg_9_1_val_cast_i_fu_239_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln463_2_fu_269_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ult_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln463_fu_265_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_design_v_mix_0_0_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outLayer0_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        outLayer0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        outLayer0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        outLayer0_empty_n : IN STD_LOGIC;
        outLayer0_read : OUT STD_LOGIC;
        srcLayer1x_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        srcLayer1x_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        srcLayer1x_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        srcLayer1x_empty_n : IN STD_LOGIC;
        srcLayer1x_read : OUT STD_LOGIC;
        outLayer1_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        outLayer1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        outLayer1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        outLayer1_full_n : IN STD_LOGIC;
        outLayer1_write : OUT STD_LOGIC;
        HwReg_width_val : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_background_V_B_val14 : IN STD_LOGIC_VECTOR (7 downto 0);
        HwReg_background_U_G_val13 : IN STD_LOGIC_VECTOR (7 downto 0);
        HwReg_background_Y_R_val12 : IN STD_LOGIC_VECTOR (7 downto 0);
        layerStartX : IN STD_LOGIC_VECTOR (15 downto 0);
        add71_i : IN STD_LOGIC_VECTOR (16 downto 0);
        notrhs_i : IN STD_LOGIC_VECTOR (0 downto 0);
        rev5 : IN STD_LOGIC_VECTOR (0 downto 0);
        empty_58 : IN STD_LOGIC_VECTOR (0 downto 0);
        empty : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170 : component main_design_v_mix_0_0_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start,
        ap_done => grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_done,
        ap_idle => grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_idle,
        ap_ready => grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_ready,
        outLayer0_dout => outLayer0_dout,
        outLayer0_num_data_valid => ap_const_lv3_0,
        outLayer0_fifo_cap => ap_const_lv3_0,
        outLayer0_empty_n => outLayer0_empty_n,
        outLayer0_read => grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer0_read,
        srcLayer1x_dout => srcLayer1x_dout,
        srcLayer1x_num_data_valid => ap_const_lv3_0,
        srcLayer1x_fifo_cap => ap_const_lv3_0,
        srcLayer1x_empty_n => srcLayer1x_empty_n,
        srcLayer1x_read => grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_srcLayer1x_read,
        outLayer1_din => grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_din,
        outLayer1_num_data_valid => ap_const_lv3_0,
        outLayer1_fifo_cap => ap_const_lv3_0,
        outLayer1_full_n => outLayer1_full_n,
        outLayer1_write => grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_write,
        HwReg_width_val => HwReg_width_val,
        HwReg_background_V_B_val14 => HwReg_background_V_B_val14,
        HwReg_background_U_G_val13 => HwReg_background_U_G_val13,
        HwReg_background_Y_R_val12 => HwReg_background_Y_R_val12,
        layerStartX => layerStartX_reg_309,
        add71_i => add71_i_reg_365,
        notrhs_i => notrhs_i_reg_378,
        rev5 => rev18_reg_373,
        empty_58 => tmp_7_reg_330,
        empty => empty_reg_315);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_254_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_254_p2 = ap_const_lv1_0))) then 
                    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_ready = ap_const_logic_1)) then 
                    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    y_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                y_fu_92 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_254_p2 = ap_const_lv1_0))) then 
                y_fu_92 <= add_ln463_fu_259_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add60_i_reg_360 <= add60_i_fu_233_p2;
                add71_i_reg_365 <= add71_i_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                empty_reg_315 <= empty_fu_190_p1;
                layerStartX_reg_309 <= HwReg_layerStartX_1_val17_dout;
                layerStartY_reg_303 <= HwReg_layerStartY_1_val19_dout;
                shl_ln449_reg_320 <= shl_ln449_fu_198_p2;
                shl_ln450_reg_325 <= shl_ln450_fu_208_p2;
                tmp_7_reg_330 <= HwReg_layerEnable_val16_dout(1 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                notrhs_i_reg_378 <= notrhs_i_fu_285_p2;
                rev18_reg_373 <= rev18_fu_278_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, ap_CS_fsm_state3, grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_done, icmp_ln463_fu_254_p2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_254_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    HwReg_layerEnable_val16_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerEnable_val16_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerEnable_val16_blk_n <= HwReg_layerEnable_val16_empty_n;
        else 
            HwReg_layerEnable_val16_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    HwReg_layerEnable_val16_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerEnable_val16_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerEnable_val16_c_blk_n <= HwReg_layerEnable_val16_c_full_n;
        else 
            HwReg_layerEnable_val16_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_layerEnable_val16_c_din <= HwReg_layerEnable_val16_dout;
    HwReg_layerEnable_val16_c_write <= HwReg_layerEnable_val16_c_write_local;

    HwReg_layerEnable_val16_c_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            HwReg_layerEnable_val16_c_write_local <= ap_const_logic_1;
        else 
            HwReg_layerEnable_val16_c_write_local <= ap_const_logic_0;
        end if; 
    end process;

    HwReg_layerEnable_val16_read <= HwReg_layerEnable_val16_read_local;

    HwReg_layerEnable_val16_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            HwReg_layerEnable_val16_read_local <= ap_const_logic_1;
        else 
            HwReg_layerEnable_val16_read_local <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_layerHeight_1_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerHeight_1_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerHeight_1_val_blk_n <= HwReg_layerHeight_1_val_empty_n;
        else 
            HwReg_layerHeight_1_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_layerHeight_1_val_read <= HwReg_layerHeight_1_val_read_local;

    HwReg_layerHeight_1_val_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            HwReg_layerHeight_1_val_read_local <= ap_const_logic_1;
        else 
            HwReg_layerHeight_1_val_read_local <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_layerScaleFactor_1_val25_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerScaleFactor_1_val25_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerScaleFactor_1_val25_blk_n <= HwReg_layerScaleFactor_1_val25_empty_n;
        else 
            HwReg_layerScaleFactor_1_val25_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_layerScaleFactor_1_val25_read <= HwReg_layerScaleFactor_1_val25_read_local;

    HwReg_layerScaleFactor_1_val25_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            HwReg_layerScaleFactor_1_val25_read_local <= ap_const_logic_1;
        else 
            HwReg_layerScaleFactor_1_val25_read_local <= ap_const_logic_0;
        end if; 
    end process;

    HwReg_layerScaleFactor_1_val25_readcast19_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(HwReg_layerScaleFactor_1_val25_dout),16));
    HwReg_layerScaleFactor_1_val25_readcast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(HwReg_layerScaleFactor_1_val25_dout),16));

    HwReg_layerStartX_1_val17_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerStartX_1_val17_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerStartX_1_val17_blk_n <= HwReg_layerStartX_1_val17_empty_n;
        else 
            HwReg_layerStartX_1_val17_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_layerStartX_1_val17_read <= HwReg_layerStartX_1_val17_read_local;

    HwReg_layerStartX_1_val17_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            HwReg_layerStartX_1_val17_read_local <= ap_const_logic_1;
        else 
            HwReg_layerStartX_1_val17_read_local <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_layerStartY_1_val19_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerStartY_1_val19_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerStartY_1_val19_blk_n <= HwReg_layerStartY_1_val19_empty_n;
        else 
            HwReg_layerStartY_1_val19_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_layerStartY_1_val19_read <= HwReg_layerStartY_1_val19_read_local;

    HwReg_layerStartY_1_val19_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            HwReg_layerStartY_1_val19_read_local <= ap_const_logic_1;
        else 
            HwReg_layerStartY_1_val19_read_local <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_layerWidth_1_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerWidth_1_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerWidth_1_val_blk_n <= HwReg_layerWidth_1_val_empty_n;
        else 
            HwReg_layerWidth_1_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_layerWidth_1_val_read <= HwReg_layerWidth_1_val_read_local;

    HwReg_layerWidth_1_val_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            HwReg_layerWidth_1_val_read_local <= ap_const_logic_1;
        else 
            HwReg_layerWidth_1_val_read_local <= ap_const_logic_0;
        end if; 
    end process;

    add60_i_fu_233_p2 <= std_logic_vector(unsigned(layerHeight_cast_i_fu_230_p1) + unsigned(hwReg_10_1_val_cast_i_fu_227_p1));
    add71_i_fu_245_p2 <= std_logic_vector(unsigned(layerWidth_cast_i_fu_242_p1) + unsigned(hwReg_9_1_val_cast_i_fu_239_p1));
    add_ln463_fu_259_p2 <= std_logic_vector(unsigned(y_fu_92) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_done)
    begin
        if ((grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, HwReg_layerEnable_val16_empty_n, HwReg_layerStartX_1_val17_empty_n, HwReg_layerStartY_1_val19_empty_n, HwReg_layerWidth_1_val_empty_n, HwReg_layerHeight_1_val_empty_n, HwReg_layerScaleFactor_1_val25_empty_n, HwReg_layerEnable_val16_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = HwReg_layerEnable_val16_c_full_n) or (ap_const_logic_0 = HwReg_layerScaleFactor_1_val25_empty_n) or (ap_const_logic_0 = HwReg_layerHeight_1_val_empty_n) or (ap_const_logic_0 = HwReg_layerWidth_1_val_empty_n) or (ap_const_logic_0 = HwReg_layerStartY_1_val19_empty_n) or (ap_const_logic_0 = HwReg_layerStartX_1_val17_empty_n) or (ap_const_logic_0 = HwReg_layerEnable_val16_empty_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, icmp_ln463_fu_254_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_254_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln463_fu_254_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln463_fu_254_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_190_p1 <= HwReg_layerEnable_val16_dout(1 - 1 downto 0);
    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start <= grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg;
    hwReg_10_1_val_cast_i_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layerStartY_reg_303),17));
    hwReg_9_1_val_cast_i_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layerStartX_reg_309),17));
    icmp_ln463_fu_254_p2 <= "1" when (y_fu_92 = HwReg_height_val) else "0";
    layerHeight_cast_i_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln449_reg_320),17));
    layerWidth_cast_i_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln450_reg_325),17));
    notrhs_i_fu_285_p2 <= "1" when (unsigned(add60_i_reg_360) > unsigned(zext_ln463_fu_265_p1)) else "0";

    outLayer0_read_assign_proc : process(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer0_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outLayer0_read <= grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer0_read;
        else 
            outLayer0_read <= ap_const_logic_0;
        end if; 
    end process;

    outLayer1_din <= grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_din;

    outLayer1_write_assign_proc : process(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outLayer1_write <= grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_write;
        else 
            outLayer1_write <= ap_const_logic_0;
        end if; 
    end process;

    rev18_fu_278_p2 <= (ult_fu_273_p2 xor ap_const_lv1_1);
    shl_ln449_fu_198_p2 <= std_logic_vector(shift_left(unsigned(HwReg_layerHeight_1_val_dout),to_integer(unsigned('0' & HwReg_layerScaleFactor_1_val25_readcast_fu_194_p1(16-1 downto 0)))));
    shl_ln450_fu_208_p2 <= std_logic_vector(shift_left(unsigned(HwReg_layerWidth_1_val_dout),to_integer(unsigned('0' & HwReg_layerScaleFactor_1_val25_readcast19_fu_204_p1(16-1 downto 0)))));

    srcLayer1x_read_assign_proc : process(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_srcLayer1x_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            srcLayer1x_read <= grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_srcLayer1x_read;
        else 
            srcLayer1x_read <= ap_const_logic_0;
        end if; 
    end process;

    ult_fu_273_p2 <= "1" when (unsigned(zext_ln463_2_fu_269_p1) < unsigned(layerStartY_reg_303)) else "0";
    zext_ln463_2_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_92),16));
    zext_ln463_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_92),17));
end behav;
