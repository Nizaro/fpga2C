-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_design_v_mix_0_0_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outLayer0_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    outLayer0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer0_empty_n : IN STD_LOGIC;
    outLayer0_read : OUT STD_LOGIC;
    srcLayer1x_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    srcLayer1x_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    srcLayer1x_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    srcLayer1x_empty_n : IN STD_LOGIC;
    srcLayer1x_read : OUT STD_LOGIC;
    outLayer1_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    outLayer1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer1_full_n : IN STD_LOGIC;
    outLayer1_write : OUT STD_LOGIC;
    HwReg_width_val : IN STD_LOGIC_VECTOR (11 downto 0);
    HwReg_background_V_B_val14 : IN STD_LOGIC_VECTOR (7 downto 0);
    HwReg_background_U_G_val13 : IN STD_LOGIC_VECTOR (7 downto 0);
    HwReg_background_Y_R_val12 : IN STD_LOGIC_VECTOR (7 downto 0);
    layerStartX : IN STD_LOGIC_VECTOR (15 downto 0);
    add71_i : IN STD_LOGIC_VECTOR (16 downto 0);
    notrhs_i : IN STD_LOGIC_VECTOR (0 downto 0);
    rev5 : IN STD_LOGIC_VECTOR (0 downto 0);
    empty_58 : IN STD_LOGIC_VECTOR (0 downto 0);
    empty : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of main_design_v_mix_0_0_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln465_reg_388 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op44_read_state2 : BOOLEAN;
    signal and_ln476_3_reg_392 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op49_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln465_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal outLayer1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal srcLayer1x_blk_n : STD_LOGIC;
    signal outLayer0_blk_n : STD_LOGIC;
    signal tmp_read_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln465_reg_388_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln476_3_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln476_3_reg_392_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln470_fu_303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln482_fu_327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_0_0_220_i_reg_171 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_0_0_220_i_reg_171 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0_0_0_220_i_reg_171 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_0_0_117_i_reg_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_0_0_117_i_reg_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0_0_0_117_i_reg_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_0_014_i_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_0_014_i_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0_0_014_i_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_0_0_0_218_i_phi_fu_201_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_0_0_218_i_reg_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_0_0_218_i_reg_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0_0_0_218_i_reg_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_0_0_0_115_i_phi_fu_211_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_0_0_115_i_reg_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_0_0_115_i_reg_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0_0_0_115_i_reg_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_0_0_012_i_phi_fu_221_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_0_012_i_reg_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_0_012_i_reg_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0_0_012_i_reg_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_88 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln465_fu_242_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_12 : STD_LOGIC_VECTOR (11 downto 0);
    signal outLayer0_read_local : STD_LOGIC;
    signal srcLayer1x_read_local : STD_LOGIC;
    signal or_ln493_6_i_fu_351_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal outLayer1_write_local : STD_LOGIC;
    signal zext_ln465_1_fu_252_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln477_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln465_fu_248_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln476_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln477_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln476_1_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln476_2_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln478_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_160 : BOOLEAN;
    signal ap_condition_162 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component main_design_v_mix_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component main_design_v_mix_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_p_0_0_014_i_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_160)) then
                if (((icmp_ln465_fu_236_p2 = ap_const_lv1_0) and (tmp_read_fu_92_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_p_0_0_014_i_reg_189 <= HwReg_background_Y_R_val12;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_0_0_014_i_reg_189 <= ap_phi_reg_pp0_iter0_p_0_0_014_i_reg_189;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_0_0_0_117_i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_160)) then
                if (((icmp_ln465_fu_236_p2 = ap_const_lv1_0) and (tmp_read_fu_92_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_p_0_0_0_117_i_reg_180 <= HwReg_background_U_G_val13;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_0_0_0_117_i_reg_180 <= ap_phi_reg_pp0_iter0_p_0_0_0_117_i_reg_180;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_0_0_0_220_i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_160)) then
                if (((icmp_ln465_fu_236_p2 = ap_const_lv1_0) and (tmp_read_fu_92_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_p_0_0_0_220_i_reg_171 <= HwReg_background_V_B_val14;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_0_0_0_220_i_reg_171 <= ap_phi_reg_pp0_iter0_p_0_0_0_220_i_reg_171;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_p_0_0_012_i_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_162)) then
                if (((ap_const_lv1_1 = and_ln476_3_reg_392) and (icmp_ln465_reg_388 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_0_0_012_i_reg_218 <= trunc_ln482_fu_327_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_0_0_012_i_reg_218 <= ap_phi_reg_pp0_iter1_p_0_0_012_i_reg_218;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_p_0_0_014_i_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_162)) then
                if (((empty = ap_const_lv1_1) and (icmp_ln465_reg_388 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_0_0_014_i_reg_189 <= trunc_ln470_fu_303_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_0_0_014_i_reg_189 <= ap_phi_reg_pp0_iter1_p_0_0_014_i_reg_189;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_p_0_0_0_115_i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_162)) then
                if (((ap_const_lv1_1 = and_ln476_3_reg_392) and (icmp_ln465_reg_388 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_115_i_reg_208 <= srcLayer1x_dout(15 downto 8);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_115_i_reg_208 <= ap_phi_reg_pp0_iter1_p_0_0_0_115_i_reg_208;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_p_0_0_0_117_i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_162)) then
                if (((empty = ap_const_lv1_1) and (icmp_ln465_reg_388 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_117_i_reg_180 <= outLayer0_dout(15 downto 8);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_117_i_reg_180 <= ap_phi_reg_pp0_iter1_p_0_0_0_117_i_reg_180;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_p_0_0_0_218_i_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_162)) then
                if (((ap_const_lv1_1 = and_ln476_3_reg_392) and (icmp_ln465_reg_388 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_218_i_reg_198 <= srcLayer1x_dout(23 downto 16);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_218_i_reg_198 <= ap_phi_reg_pp0_iter1_p_0_0_0_218_i_reg_198;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_p_0_0_0_220_i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_162)) then
                if (((empty = ap_const_lv1_1) and (icmp_ln465_reg_388 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_220_i_reg_171 <= outLayer0_dout(23 downto 16);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_220_i_reg_171 <= ap_phi_reg_pp0_iter1_p_0_0_0_220_i_reg_171;
                end if;
            end if; 
        end if;
    end process;

    x_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln465_fu_236_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_88 <= add_ln465_fu_242_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_88 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln476_3_reg_392 <= and_ln476_3_fu_292_p2;
                and_ln476_3_reg_392_pp0_iter1_reg <= and_ln476_3_reg_392;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln465_reg_388 <= icmp_ln465_fu_236_p2;
                icmp_ln465_reg_388_pp0_iter1_reg <= icmp_ln465_reg_388;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_p_0_0_012_i_reg_218 <= ap_phi_reg_pp0_iter0_p_0_0_012_i_reg_218;
                ap_phi_reg_pp0_iter1_p_0_0_0_115_i_reg_208 <= ap_phi_reg_pp0_iter0_p_0_0_0_115_i_reg_208;
                ap_phi_reg_pp0_iter1_p_0_0_0_218_i_reg_198 <= ap_phi_reg_pp0_iter0_p_0_0_0_218_i_reg_198;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln465_fu_242_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_12) + unsigned(ap_const_lv12_1));
    and_ln476_1_fu_280_p2 <= (empty_58 and and_ln476_fu_274_p2);
    and_ln476_2_fu_286_p2 <= (xor_ln477_fu_262_p2 and and_ln476_1_fu_280_p2);
    and_ln476_3_fu_292_p2 <= (icmp_ln478_fu_268_p2 and and_ln476_2_fu_286_p2);
    and_ln476_fu_274_p2 <= (rev5 and notrhs_i);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(outLayer0_empty_n, ap_predicate_op44_read_state2, srcLayer1x_empty_n, ap_predicate_op49_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op49_read_state2 = ap_const_boolean_1) and (srcLayer1x_empty_n = ap_const_logic_0)) or ((ap_predicate_op44_read_state2 = ap_const_boolean_1) and (outLayer0_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(outLayer1_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (outLayer1_full_n = ap_const_logic_0);
    end process;


    ap_condition_160_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_160 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_162_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_162 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln465_fu_236_p2)
    begin
        if (((icmp_ln465_fu_236_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_p_0_0_012_i_phi_fu_221_p4_assign_proc : process(icmp_ln465_reg_388_pp0_iter1_reg, and_ln476_3_reg_392_pp0_iter1_reg, ap_phi_reg_pp0_iter2_p_0_0_014_i_reg_189, ap_phi_reg_pp0_iter2_p_0_0_012_i_reg_218)
    begin
        if (((ap_const_lv1_0 = and_ln476_3_reg_392_pp0_iter1_reg) and (icmp_ln465_reg_388_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_p_0_0_012_i_phi_fu_221_p4 <= ap_phi_reg_pp0_iter2_p_0_0_014_i_reg_189;
        else 
            ap_phi_mux_p_0_0_012_i_phi_fu_221_p4 <= ap_phi_reg_pp0_iter2_p_0_0_012_i_reg_218;
        end if; 
    end process;


    ap_phi_mux_p_0_0_0_115_i_phi_fu_211_p4_assign_proc : process(icmp_ln465_reg_388_pp0_iter1_reg, and_ln476_3_reg_392_pp0_iter1_reg, ap_phi_reg_pp0_iter2_p_0_0_0_117_i_reg_180, ap_phi_reg_pp0_iter2_p_0_0_0_115_i_reg_208)
    begin
        if (((ap_const_lv1_0 = and_ln476_3_reg_392_pp0_iter1_reg) and (icmp_ln465_reg_388_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_p_0_0_0_115_i_phi_fu_211_p4 <= ap_phi_reg_pp0_iter2_p_0_0_0_117_i_reg_180;
        else 
            ap_phi_mux_p_0_0_0_115_i_phi_fu_211_p4 <= ap_phi_reg_pp0_iter2_p_0_0_0_115_i_reg_208;
        end if; 
    end process;


    ap_phi_mux_p_0_0_0_218_i_phi_fu_201_p4_assign_proc : process(icmp_ln465_reg_388_pp0_iter1_reg, and_ln476_3_reg_392_pp0_iter1_reg, ap_phi_reg_pp0_iter2_p_0_0_0_220_i_reg_171, ap_phi_reg_pp0_iter2_p_0_0_0_218_i_reg_198)
    begin
        if (((ap_const_lv1_0 = and_ln476_3_reg_392_pp0_iter1_reg) and (icmp_ln465_reg_388_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_p_0_0_0_218_i_phi_fu_201_p4 <= ap_phi_reg_pp0_iter2_p_0_0_0_220_i_reg_171;
        else 
            ap_phi_mux_p_0_0_0_218_i_phi_fu_201_p4 <= ap_phi_reg_pp0_iter2_p_0_0_0_218_i_reg_198;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_0_0_012_i_reg_218 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_0_0_014_i_reg_189 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_0_0_0_115_i_reg_208 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_0_0_0_117_i_reg_180 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_0_0_0_218_i_reg_198 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_0_0_0_220_i_reg_171 <= "XXXXXXXX";

    ap_predicate_op44_read_state2_assign_proc : process(icmp_ln465_reg_388, empty)
    begin
                ap_predicate_op44_read_state2 <= ((empty = ap_const_lv1_1) and (icmp_ln465_reg_388 = ap_const_lv1_0));
    end process;


    ap_predicate_op49_read_state2_assign_proc : process(icmp_ln465_reg_388, and_ln476_3_reg_392)
    begin
                ap_predicate_op49_read_state2 <= ((ap_const_lv1_1 = and_ln476_3_reg_392) and (icmp_ln465_reg_388 = ap_const_lv1_0));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_12_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_88, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_12 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_x_12 <= x_fu_88;
        end if; 
    end process;

    icmp_ln465_fu_236_p2 <= "1" when (ap_sig_allocacmp_x_12 = HwReg_width_val) else "0";
    icmp_ln477_fu_256_p2 <= "1" when (unsigned(zext_ln465_1_fu_252_p1) < unsigned(layerStartX)) else "0";
    icmp_ln478_fu_268_p2 <= "1" when (unsigned(add71_i) > unsigned(zext_ln465_fu_248_p1)) else "0";
    or_ln493_6_i_fu_351_p4 <= ((ap_phi_mux_p_0_0_0_218_i_phi_fu_201_p4 & ap_phi_mux_p_0_0_0_115_i_phi_fu_211_p4) & ap_phi_mux_p_0_0_012_i_phi_fu_221_p4);

    outLayer0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, outLayer0_empty_n, ap_predicate_op44_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op44_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outLayer0_blk_n <= outLayer0_empty_n;
        else 
            outLayer0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outLayer0_read <= outLayer0_read_local;

    outLayer0_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op44_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op44_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outLayer0_read_local <= ap_const_logic_1;
        else 
            outLayer0_read_local <= ap_const_logic_0;
        end if; 
    end process;


    outLayer1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, outLayer1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outLayer1_blk_n <= outLayer1_full_n;
        else 
            outLayer1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outLayer1_din <= or_ln493_6_i_fu_351_p4;
    outLayer1_write <= outLayer1_write_local;

    outLayer1_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outLayer1_write_local <= ap_const_logic_1;
        else 
            outLayer1_write_local <= ap_const_logic_0;
        end if; 
    end process;


    srcLayer1x_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, srcLayer1x_empty_n, ap_predicate_op49_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op49_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcLayer1x_blk_n <= srcLayer1x_empty_n;
        else 
            srcLayer1x_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    srcLayer1x_read <= srcLayer1x_read_local;

    srcLayer1x_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op49_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op49_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcLayer1x_read_local <= ap_const_logic_1;
        else 
            srcLayer1x_read_local <= ap_const_logic_0;
        end if; 
    end process;

    tmp_read_fu_92_p2 <= empty;
    trunc_ln470_fu_303_p1 <= outLayer0_dout(8 - 1 downto 0);
    trunc_ln482_fu_327_p1 <= srcLayer1x_dout(8 - 1 downto 0);
    xor_ln477_fu_262_p2 <= (icmp_ln477_fu_256_p2 xor ap_const_lv1_1);
    zext_ln465_1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_12),16));
    zext_ln465_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_12),17));
end behav;
