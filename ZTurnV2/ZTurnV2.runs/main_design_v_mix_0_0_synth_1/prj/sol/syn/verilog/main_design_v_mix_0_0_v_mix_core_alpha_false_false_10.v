// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_design_v_mix_0_0_v_mix_core_alpha_false_false_10 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        outLayer1_dout,
        outLayer1_num_data_valid,
        outLayer1_fifo_cap,
        outLayer1_empty_n,
        outLayer1_read,
        srcLayer2x_dout,
        srcLayer2x_num_data_valid,
        srcLayer2x_fifo_cap,
        srcLayer2x_empty_n,
        srcLayer2x_read,
        hwReg_0_val,
        hwReg_1_val,
        hwReg_6_val_dout,
        hwReg_6_val_num_data_valid,
        hwReg_6_val_fifo_cap,
        hwReg_6_val_empty_n,
        hwReg_6_val_read,
        hwReg_9_2_val_dout,
        hwReg_9_2_val_num_data_valid,
        hwReg_9_2_val_fifo_cap,
        hwReg_9_2_val_empty_n,
        hwReg_9_2_val_read,
        hwReg_10_2_val_dout,
        hwReg_10_2_val_num_data_valid,
        hwReg_10_2_val_fifo_cap,
        hwReg_10_2_val_empty_n,
        hwReg_10_2_val_read,
        hwReg_11_2_val_dout,
        hwReg_11_2_val_num_data_valid,
        hwReg_11_2_val_fifo_cap,
        hwReg_11_2_val_empty_n,
        hwReg_11_2_val_read,
        hwReg_12_2_val_dout,
        hwReg_12_2_val_num_data_valid,
        hwReg_12_2_val_fifo_cap,
        hwReg_12_2_val_empty_n,
        hwReg_12_2_val_read,
        hwReg_13_2_val_dout,
        hwReg_13_2_val_num_data_valid,
        hwReg_13_2_val_fifo_cap,
        hwReg_13_2_val_empty_n,
        hwReg_13_2_val_read,
        outLayer2_din,
        outLayer2_num_data_valid,
        outLayer2_fifo_cap,
        outLayer2_full_n,
        outLayer2_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] outLayer1_dout;
input  [2:0] outLayer1_num_data_valid;
input  [2:0] outLayer1_fifo_cap;
input   outLayer1_empty_n;
output   outLayer1_read;
input  [23:0] srcLayer2x_dout;
input  [2:0] srcLayer2x_num_data_valid;
input  [2:0] srcLayer2x_fifo_cap;
input   srcLayer2x_empty_n;
output   srcLayer2x_read;
input  [11:0] hwReg_0_val;
input  [11:0] hwReg_1_val;
input  [2:0] hwReg_6_val_dout;
input  [2:0] hwReg_6_val_num_data_valid;
input  [2:0] hwReg_6_val_fifo_cap;
input   hwReg_6_val_empty_n;
output   hwReg_6_val_read;
input  [15:0] hwReg_9_2_val_dout;
input  [3:0] hwReg_9_2_val_num_data_valid;
input  [3:0] hwReg_9_2_val_fifo_cap;
input   hwReg_9_2_val_empty_n;
output   hwReg_9_2_val_read;
input  [15:0] hwReg_10_2_val_dout;
input  [3:0] hwReg_10_2_val_num_data_valid;
input  [3:0] hwReg_10_2_val_fifo_cap;
input   hwReg_10_2_val_empty_n;
output   hwReg_10_2_val_read;
input  [15:0] hwReg_11_2_val_dout;
input  [2:0] hwReg_11_2_val_num_data_valid;
input  [2:0] hwReg_11_2_val_fifo_cap;
input   hwReg_11_2_val_empty_n;
output   hwReg_11_2_val_read;
input  [15:0] hwReg_12_2_val_dout;
input  [2:0] hwReg_12_2_val_num_data_valid;
input  [2:0] hwReg_12_2_val_fifo_cap;
input   hwReg_12_2_val_empty_n;
output   hwReg_12_2_val_read;
input  [7:0] hwReg_13_2_val_dout;
input  [3:0] hwReg_13_2_val_num_data_valid;
input  [3:0] hwReg_13_2_val_fifo_cap;
input   hwReg_13_2_val_empty_n;
output   hwReg_13_2_val_read;
output  [23:0] outLayer2_din;
input  [2:0] outLayer2_num_data_valid;
input  [2:0] outLayer2_fifo_cap;
input   outLayer2_full_n;
output   outLayer2_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg outLayer1_read;
reg srcLayer2x_read;
reg outLayer2_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    hwReg_6_val_blk_n;
reg    hwReg_9_2_val_blk_n;
reg    hwReg_10_2_val_blk_n;
reg    hwReg_11_2_val_blk_n;
reg    hwReg_12_2_val_blk_n;
reg    hwReg_13_2_val_blk_n;
reg   [15:0] layerStartY_reg_257;
reg    ap_block_state1;
reg   [15:0] layerStartX_reg_263;
wire   [15:0] shl_ln449_fu_152_p2;
reg   [15:0] shl_ln449_reg_269;
wire   [15:0] shl_ln450_fu_162_p2;
reg   [15:0] shl_ln450_reg_274;
reg   [0:0] tmp_5_reg_279;
wire    ap_CS_fsm_state2;
wire   [16:0] add60_fu_187_p2;
reg   [16:0] add60_reg_294;
wire   [16:0] add71_fu_199_p2;
reg   [16:0] add71_reg_299;
wire   [0:0] rev12_fu_232_p2;
reg   [0:0] rev12_reg_307;
wire    ap_CS_fsm_state3;
wire   [0:0] notrhs_fu_239_p2;
reg   [0:0] notrhs_reg_312;
wire    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start;
wire    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_done;
wire    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_idle;
wire    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_ready;
wire    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer1_read;
wire    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_srcLayer2x_read;
wire   [23:0] grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_din;
wire    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_write;
reg    grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg;
wire   [0:0] icmp_ln463_fu_208_p2;
wire    ap_CS_fsm_state4;
reg   [11:0] y_fu_80;
wire   [11:0] add_ln463_fu_213_p2;
reg    hwReg_13_2_val_read_local;
reg    hwReg_12_2_val_read_local;
reg    hwReg_11_2_val_read_local;
reg    hwReg_10_2_val_read_local;
reg    hwReg_9_2_val_read_local;
reg    hwReg_6_val_read_local;
wire   [15:0] hwReg_13_2_val_readcast_fu_148_p1;
wire   [15:0] hwReg_13_2_val_readcast13_fu_158_p1;
wire   [16:0] layerHeight_cast_fu_184_p1;
wire   [16:0] hwReg_10_2_val_cast_fu_181_p1;
wire   [16:0] layerWidth_cast_fu_196_p1;
wire   [16:0] hwReg_9_2_val_cast_fu_193_p1;
wire   [15:0] zext_ln463_1_fu_223_p1;
wire   [0:0] ult_fu_227_p2;
wire   [16:0] zext_ln463_fu_219_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg = 1'b0;
#0 y_fu_80 = 12'd0;
end

main_design_v_mix_0_0_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3 grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start),
    .ap_done(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_done),
    .ap_idle(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_idle),
    .ap_ready(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_ready),
    .outLayer1_dout(outLayer1_dout),
    .outLayer1_num_data_valid(3'd0),
    .outLayer1_fifo_cap(3'd0),
    .outLayer1_empty_n(outLayer1_empty_n),
    .outLayer1_read(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer1_read),
    .srcLayer2x_dout(srcLayer2x_dout),
    .srcLayer2x_num_data_valid(3'd0),
    .srcLayer2x_fifo_cap(3'd0),
    .srcLayer2x_empty_n(srcLayer2x_empty_n),
    .srcLayer2x_read(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_srcLayer2x_read),
    .outLayer2_din(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_din),
    .outLayer2_num_data_valid(3'd0),
    .outLayer2_fifo_cap(3'd0),
    .outLayer2_full_n(outLayer2_full_n),
    .outLayer2_write(grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_write),
    .hwReg_0_val(hwReg_0_val),
    .layerStartX(layerStartX_reg_263),
    .add71(add71_reg_299),
    .notrhs(notrhs_reg_312),
    .rev5(rev12_reg_307),
    .empty(tmp_5_reg_279)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_208_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_208_p2 == 1'd0))) begin
            grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg <= 1'b1;
        end else if ((grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_ready == 1'b1)) begin
            grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        y_fu_80 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_208_p2 == 1'd0))) begin
        y_fu_80 <= add_ln463_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add60_reg_294 <= add60_fu_187_p2;
        add71_reg_299 <= add71_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        layerStartX_reg_263 <= hwReg_9_2_val_dout;
        layerStartY_reg_257 <= hwReg_10_2_val_dout;
        shl_ln449_reg_269 <= shl_ln449_fu_152_p2;
        shl_ln450_reg_274 <= shl_ln450_fu_162_p2;
        tmp_5_reg_279 <= hwReg_6_val_dout[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        notrhs_reg_312 <= notrhs_fu_239_p2;
        rev12_reg_307 <= rev12_fu_232_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_208_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_10_2_val_blk_n = hwReg_10_2_val_empty_n;
    end else begin
        hwReg_10_2_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        hwReg_10_2_val_read_local = 1'b1;
    end else begin
        hwReg_10_2_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_11_2_val_blk_n = hwReg_11_2_val_empty_n;
    end else begin
        hwReg_11_2_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        hwReg_11_2_val_read_local = 1'b1;
    end else begin
        hwReg_11_2_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_12_2_val_blk_n = hwReg_12_2_val_empty_n;
    end else begin
        hwReg_12_2_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        hwReg_12_2_val_read_local = 1'b1;
    end else begin
        hwReg_12_2_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_13_2_val_blk_n = hwReg_13_2_val_empty_n;
    end else begin
        hwReg_13_2_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        hwReg_13_2_val_read_local = 1'b1;
    end else begin
        hwReg_13_2_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_6_val_blk_n = hwReg_6_val_empty_n;
    end else begin
        hwReg_6_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        hwReg_6_val_read_local = 1'b1;
    end else begin
        hwReg_6_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_9_2_val_blk_n = hwReg_9_2_val_empty_n;
    end else begin
        hwReg_9_2_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        hwReg_9_2_val_read_local = 1'b1;
    end else begin
        hwReg_9_2_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_208_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outLayer1_read = grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer1_read;
    end else begin
        outLayer1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outLayer2_write = grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_write;
    end else begin
        outLayer2_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        srcLayer2x_read = grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_srcLayer2x_read;
    end else begin
        srcLayer2x_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_208_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add60_fu_187_p2 = (layerHeight_cast_fu_184_p1 + hwReg_10_2_val_cast_fu_181_p1);

assign add71_fu_199_p2 = (layerWidth_cast_fu_196_p1 + hwReg_9_2_val_cast_fu_193_p1);

assign add_ln463_fu_213_p2 = (y_fu_80 + 12'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((hwReg_13_2_val_empty_n == 1'b0) | (hwReg_12_2_val_empty_n == 1'b0) | (hwReg_11_2_val_empty_n == 1'b0) | (hwReg_10_2_val_empty_n == 1'b0) | (hwReg_9_2_val_empty_n == 1'b0) | (hwReg_6_val_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start = grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_ap_start_reg;

assign hwReg_10_2_val_cast_fu_181_p1 = layerStartY_reg_257;

assign hwReg_10_2_val_read = hwReg_10_2_val_read_local;

assign hwReg_11_2_val_read = hwReg_11_2_val_read_local;

assign hwReg_12_2_val_read = hwReg_12_2_val_read_local;

assign hwReg_13_2_val_read = hwReg_13_2_val_read_local;

assign hwReg_13_2_val_readcast13_fu_158_p1 = hwReg_13_2_val_dout;

assign hwReg_13_2_val_readcast_fu_148_p1 = hwReg_13_2_val_dout;

assign hwReg_6_val_read = hwReg_6_val_read_local;

assign hwReg_9_2_val_cast_fu_193_p1 = layerStartX_reg_263;

assign hwReg_9_2_val_read = hwReg_9_2_val_read_local;

assign icmp_ln463_fu_208_p2 = ((y_fu_80 == hwReg_1_val) ? 1'b1 : 1'b0);

assign layerHeight_cast_fu_184_p1 = shl_ln449_reg_269;

assign layerWidth_cast_fu_196_p1 = shl_ln450_reg_274;

assign notrhs_fu_239_p2 = ((add60_reg_294 > zext_ln463_fu_219_p1) ? 1'b1 : 1'b0);

assign outLayer2_din = grp_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3_fu_132_outLayer2_din;

assign rev12_fu_232_p2 = (ult_fu_227_p2 ^ 1'd1);

assign shl_ln449_fu_152_p2 = hwReg_12_2_val_dout << hwReg_13_2_val_readcast_fu_148_p1;

assign shl_ln450_fu_162_p2 = hwReg_11_2_val_dout << hwReg_13_2_val_readcast13_fu_158_p1;

assign start_out = real_start;

assign ult_fu_227_p2 = ((zext_ln463_1_fu_223_p1 < layerStartY_reg_257) ? 1'b1 : 1'b0);

assign zext_ln463_1_fu_223_p1 = y_fu_80;

assign zext_ln463_fu_219_p1 = y_fu_80;

endmodule //main_design_v_mix_0_0_v_mix_core_alpha_false_false_10
