// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="main_design_v_mix_0_0_v_mix,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.802000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=8375,HLS_SYN_LUT=10321,HLS_VERSION=2024_1}" *)

module main_design_v_mix_0_0_v_mix (
        ap_clk,
        ap_rst_n,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        s_axis_video1_TDATA,
        s_axis_video1_TVALID,
        s_axis_video1_TREADY,
        s_axis_video1_TKEEP,
        s_axis_video1_TSTRB,
        s_axis_video1_TUSER,
        s_axis_video1_TLAST,
        s_axis_video1_TID,
        s_axis_video1_TDEST,
        s_axis_video2_TDATA,
        s_axis_video2_TVALID,
        s_axis_video2_TREADY,
        s_axis_video2_TKEEP,
        s_axis_video2_TSTRB,
        s_axis_video2_TUSER,
        s_axis_video2_TLAST,
        s_axis_video2_TID,
        s_axis_video2_TDEST,
        layerAlpha_0,
        layerStartX_0,
        layerStartY_0,
        layerWidth_0,
        layerHeight_0,
        layerScaleFactor_0,
        layerVideoFormat_address0,
        layerVideoFormat_ce0,
        layerVideoFormat_we0,
        layerVideoFormat_d0,
        layerVideoFormat_q0,
        layerVideoFormat_address1,
        layerVideoFormat_ce1,
        layerVideoFormat_we1,
        layerVideoFormat_d1,
        layerVideoFormat_q1,
        layerStride_0,
        K11,
        K12,
        K13,
        K21,
        K22,
        K23,
        K31,
        K32,
        K33,
        ROffset,
        GOffset,
        BOffset,
        K11_2,
        K12_2,
        K13_2,
        K21_2,
        K22_2,
        K23_2,
        K31_2,
        K32_2,
        K33_2,
        YOffset,
        UOffset,
        VOffset,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
input  [23:0] s_axis_video1_TDATA;
input   s_axis_video1_TVALID;
output   s_axis_video1_TREADY;
input  [2:0] s_axis_video1_TKEEP;
input  [2:0] s_axis_video1_TSTRB;
input  [0:0] s_axis_video1_TUSER;
input  [0:0] s_axis_video1_TLAST;
input  [0:0] s_axis_video1_TID;
input  [0:0] s_axis_video1_TDEST;
input  [23:0] s_axis_video2_TDATA;
input   s_axis_video2_TVALID;
output   s_axis_video2_TREADY;
input  [2:0] s_axis_video2_TKEEP;
input  [2:0] s_axis_video2_TSTRB;
input  [0:0] s_axis_video2_TUSER;
input  [0:0] s_axis_video2_TLAST;
input  [0:0] s_axis_video2_TID;
input  [0:0] s_axis_video2_TDEST;
input  [15:0] layerAlpha_0;
input  [15:0] layerStartX_0;
input  [15:0] layerStartY_0;
input  [15:0] layerWidth_0;
input  [15:0] layerHeight_0;
input  [7:0] layerScaleFactor_0;
output  [1:0] layerVideoFormat_address0;
output   layerVideoFormat_ce0;
output   layerVideoFormat_we0;
output  [7:0] layerVideoFormat_d0;
input  [7:0] layerVideoFormat_q0;
output  [1:0] layerVideoFormat_address1;
output   layerVideoFormat_ce1;
output   layerVideoFormat_we1;
output  [7:0] layerVideoFormat_d1;
input  [7:0] layerVideoFormat_q1;
input  [15:0] layerStride_0;
input  [31:0] K11;
input  [31:0] K12;
input  [31:0] K13;
input  [31:0] K21;
input  [31:0] K22;
input  [31:0] K23;
input  [31:0] K31;
input  [31:0] K32;
input  [31:0] K33;
input  [31:0] ROffset;
input  [31:0] GOffset;
input  [31:0] BOffset;
input  [31:0] K11_2;
input  [31:0] K12_2;
input  [31:0] K13_2;
input  [31:0] K21_2;
input  [31:0] K22_2;
input  [31:0] K23_2;
input  [31:0] K31_2;
input  [31:0] K32_2;
input  [31:0] K33_2;
input  [31:0] YOffset;
input  [31:0] UOffset;
input  [31:0] VOffset;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] width;
wire   [15:0] height;
wire   [15:0] video_format;
wire   [15:0] background_Y_R;
wire   [15:0] background_U_G;
wire   [15:0] background_V_B;
wire   [31:0] layerEnable;
wire   [15:0] layerAlpha_1;
wire   [15:0] layerAlpha_2;
wire   [15:0] layerStartX_1;
wire   [15:0] layerStartX_2;
wire   [15:0] layerStartY_1;
wire   [15:0] layerStartY_2;
wire   [15:0] layerWidth_1;
wire   [15:0] layerWidth_2;
wire   [15:0] layerHeight_1;
wire   [15:0] layerHeight_2;
wire   [7:0] layerScaleFactor_1;
wire   [7:0] layerScaleFactor_2;
wire   [15:0] layerStride_1;
wire   [15:0] layerStride_2;
wire   [15:0] reserve;
wire   [2:0] trunc_ln1812_fu_555_p1;
reg   [2:0] trunc_ln1812_reg_1016;
wire   [7:0] trunc_ln1812_1_fu_559_p1;
reg   [7:0] trunc_ln1812_1_reg_1021;
wire   [7:0] trunc_ln1812_2_fu_563_p1;
reg   [7:0] trunc_ln1812_2_reg_1026;
wire   [7:0] trunc_ln1812_3_fu_567_p1;
reg   [7:0] trunc_ln1812_3_reg_1031;
wire   [11:0] trunc_ln1812_4_fu_571_p1;
reg   [11:0] trunc_ln1812_4_reg_1036;
wire   [11:0] trunc_ln1812_5_fu_575_p1;
reg   [11:0] trunc_ln1812_5_reg_1041;
reg   [15:0] layerWidth_1_read_reg_1081;
reg   [15:0] layerWidth_2_read_reg_1086;
reg   [15:0] layerHeight_1_read_reg_1096;
reg   [15:0] layerHeight_2_read_reg_1101;
reg   [7:0] layerScaleFactor_1_read_reg_1111;
reg   [7:0] layerScaleFactor_2_read_reg_1116;
wire   [0:0] HwReg_layerEnableFlag_2_fu_740_p3;
reg   [0:0] HwReg_layerEnableFlag_2_reg_1121;
wire    ap_CS_fsm_state2;
wire   [7:0] HwReg_layerScaleFactor_1_fu_748_p3;
reg   [7:0] HwReg_layerScaleFactor_1_reg_1126;
wire   [15:0] HwReg_layerHeight_1_fu_756_p3;
reg   [15:0] HwReg_layerHeight_1_reg_1131;
wire   [15:0] HwReg_layerWidth_1_fu_764_p3;
reg   [15:0] HwReg_layerWidth_1_reg_1136;
wire   [15:0] HwReg_layerStartY_1_fu_772_p3;
reg   [15:0] HwReg_layerStartY_1_reg_1141;
wire   [15:0] HwReg_layerStartX_1_fu_780_p3;
reg   [15:0] HwReg_layerStartX_1_reg_1146;
wire   [0:0] HwReg_layerEnableFlag_1_fu_788_p3;
reg   [0:0] HwReg_layerEnableFlag_1_reg_1151;
wire   [0:0] HwReg_layerEnableFlag_fu_796_p3;
reg   [0:0] HwReg_layerEnableFlag_reg_1156;
wire   [7:0] HwReg_layerScaleFactor_fu_804_p3;
reg   [7:0] HwReg_layerScaleFactor_reg_1161;
wire   [15:0] HwReg_layerHeight_fu_812_p3;
reg   [15:0] HwReg_layerHeight_reg_1166;
wire   [15:0] HwReg_layerWidth_fu_820_p3;
reg   [15:0] HwReg_layerWidth_reg_1171;
wire   [15:0] HwReg_layerStartY_fu_828_p3;
reg   [15:0] HwReg_layerStartY_reg_1176;
wire   [15:0] HwReg_layerStartX_fu_836_p3;
reg   [15:0] HwReg_layerStartX_reg_1181;
wire   [23:0] grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDATA;
wire   [2:0] grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TKEEP;
wire   [2:0] grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TSTRB;
wire   [0:0] grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TUSER;
wire   [0:0] grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TLAST;
wire   [0:0] grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TID;
wire   [0:0] grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDEST;
wire    grp_VMixHlsDataFlowFunction_fu_476_ap_start;
wire    grp_VMixHlsDataFlowFunction_fu_476_s_axis_video_TREADY;
wire    grp_VMixHlsDataFlowFunction_fu_476_s_axis_video1_TREADY;
wire    grp_VMixHlsDataFlowFunction_fu_476_s_axis_video2_TREADY;
wire    grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID;
wire    grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TREADY;
wire    grp_VMixHlsDataFlowFunction_fu_476_ap_done;
wire    grp_VMixHlsDataFlowFunction_fu_476_ap_ready;
wire    grp_VMixHlsDataFlowFunction_fu_476_ap_idle;
reg    grp_VMixHlsDataFlowFunction_fu_476_ap_continue;
reg    grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready;
reg    ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done;
reg    ap_block_state4_on_subcall_done;
wire    ap_sync_grp_VMixHlsDataFlowFunction_fu_476_ap_ready;
reg   [0:0] HwReg_layerEnableFlag_3_fu_294;
reg   [0:0] HwReg_layerEnableFlag_4_fu_298;
reg   [0:0] HwReg_layerEnableFlag_5_fu_302;
reg   [7:0] empty_fu_306;
reg   [15:0] empty_78_fu_310;
reg   [15:0] empty_79_fu_314;
reg   [15:0] empty_80_fu_318;
reg   [15:0] empty_81_fu_322;
reg   [7:0] empty_82_fu_326;
reg   [15:0] empty_83_fu_330;
reg   [15:0] empty_84_fu_334;
reg   [15:0] empty_85_fu_338;
reg   [15:0] empty_86_fu_342;
reg   [1:0] i7_fu_346;
wire   [1:0] i_fu_844_p2;
wire   [15:0] HwReg_layerStartX_2_fu_626_p7;
wire   [15:0] HwReg_layerStartY_2_fu_643_p7;
wire   [15:0] tmp_s_fu_660_p7;
wire   [15:0] tmp_4_fu_677_p7;
wire   [7:0] HwReg_layerScaleFactor_2_fu_694_p7;
wire   [31:0] zext_ln2636_fu_711_p1;
wire   [0:0] icmp_ln2629_fu_722_p2;
wire   [0:0] icmp_ln2629_1_fu_728_p2;
wire   [0:0] or_ln2629_fu_734_p2;
wire   [0:0] tobool_fu_715_p3;
wire   [7:0] HwReg_layerScaleFactor_2_fu_694_p9;
wire   [15:0] tmp_4_fu_677_p9;
wire   [15:0] tmp_s_fu_660_p9;
wire   [15:0] HwReg_layerStartY_2_fu_643_p9;
wire   [15:0] HwReg_layerStartX_2_fu_626_p9;
wire   [0:0] icmp_ln2626_fu_850_p2;
wire    ap_CS_fsm_state5;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    regslice_both_s_axis_video_V_data_V_U_apdone_blk;
wire   [23:0] s_axis_video_TDATA_int_regslice;
wire    s_axis_video_TVALID_int_regslice;
reg    s_axis_video_TREADY_int_regslice;
wire    regslice_both_s_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
wire   [2:0] s_axis_video_TKEEP_int_regslice;
wire    regslice_both_s_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
wire   [2:0] s_axis_video_TSTRB_int_regslice;
wire    regslice_both_s_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int_regslice;
wire    regslice_both_s_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int_regslice;
wire    regslice_both_s_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int_regslice;
wire    regslice_both_s_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int_regslice;
wire    regslice_both_s_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video_V_dest_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_data_V_U_apdone_blk;
wire   [23:0] s_axis_video1_TDATA_int_regslice;
wire    s_axis_video1_TVALID_int_regslice;
reg    s_axis_video1_TREADY_int_regslice;
wire    regslice_both_s_axis_video1_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_keep_V_U_apdone_blk;
wire   [2:0] s_axis_video1_TKEEP_int_regslice;
wire    regslice_both_s_axis_video1_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_strb_V_U_apdone_blk;
wire   [2:0] s_axis_video1_TSTRB_int_regslice;
wire    regslice_both_s_axis_video1_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video1_TUSER_int_regslice;
wire    regslice_both_s_axis_video1_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video1_TLAST_int_regslice;
wire    regslice_both_s_axis_video1_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video1_TID_int_regslice;
wire    regslice_both_s_axis_video1_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video1_TDEST_int_regslice;
wire    regslice_both_s_axis_video1_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_dest_V_U_ack_in;
wire    regslice_both_s_axis_video2_V_data_V_U_apdone_blk;
wire   [23:0] s_axis_video2_TDATA_int_regslice;
wire    s_axis_video2_TVALID_int_regslice;
reg    s_axis_video2_TREADY_int_regslice;
wire    regslice_both_s_axis_video2_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video2_V_keep_V_U_apdone_blk;
wire   [2:0] s_axis_video2_TKEEP_int_regslice;
wire    regslice_both_s_axis_video2_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video2_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video2_V_strb_V_U_apdone_blk;
wire   [2:0] s_axis_video2_TSTRB_int_regslice;
wire    regslice_both_s_axis_video2_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video2_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video2_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video2_TUSER_int_regslice;
wire    regslice_both_s_axis_video2_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video2_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video2_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video2_TLAST_int_regslice;
wire    regslice_both_s_axis_video2_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video2_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video2_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video2_TID_int_regslice;
wire    regslice_both_s_axis_video2_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video2_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video2_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video2_TDEST_int_regslice;
wire    regslice_both_s_axis_video2_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video2_V_dest_V_U_ack_in;
wire    m_axis_video_TVALID_int_regslice;
wire    m_axis_video_TREADY_int_regslice;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;
wire   [1:0] HwReg_layerStartX_2_fu_626_p1;
wire   [1:0] HwReg_layerStartX_2_fu_626_p3;
wire  signed [1:0] HwReg_layerStartX_2_fu_626_p5;
wire   [1:0] HwReg_layerStartY_2_fu_643_p1;
wire   [1:0] HwReg_layerStartY_2_fu_643_p3;
wire  signed [1:0] HwReg_layerStartY_2_fu_643_p5;
wire   [1:0] tmp_s_fu_660_p1;
wire   [1:0] tmp_s_fu_660_p3;
wire  signed [1:0] tmp_s_fu_660_p5;
wire   [1:0] tmp_4_fu_677_p1;
wire   [1:0] tmp_4_fu_677_p3;
wire  signed [1:0] tmp_4_fu_677_p5;
wire   [1:0] HwReg_layerScaleFactor_2_fu_694_p1;
wire   [1:0] HwReg_layerScaleFactor_2_fu_694_p3;
wire  signed [1:0] HwReg_layerScaleFactor_2_fu_694_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready = 1'b0;
#0 ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done = 1'b0;
#0 HwReg_layerEnableFlag_3_fu_294 = 1'd0;
#0 HwReg_layerEnableFlag_4_fu_298 = 1'd0;
#0 HwReg_layerEnableFlag_5_fu_302 = 1'd0;
#0 empty_fu_306 = 8'd0;
#0 empty_78_fu_310 = 16'd0;
#0 empty_79_fu_314 = 16'd0;
#0 empty_80_fu_318 = 16'd0;
#0 empty_81_fu_322 = 16'd0;
#0 empty_82_fu_326 = 8'd0;
#0 empty_83_fu_330 = 16'd0;
#0 empty_84_fu_334 = 16'd0;
#0 empty_85_fu_338 = 16'd0;
#0 empty_86_fu_342 = 16'd0;
#0 i7_fu_346 = 2'd0;
end

main_design_v_mix_0_0_VMixHlsDataFlowFunction grp_VMixHlsDataFlowFunction_fu_476(
    .HwReg_width_val(trunc_ln1812_4_reg_1036),
    .HwReg_height_val(trunc_ln1812_5_reg_1041),
    .HwReg_background_Y_R_val12(trunc_ln1812_3_reg_1031),
    .HwReg_background_U_G_val13(trunc_ln1812_2_reg_1026),
    .HwReg_background_V_B_val14(trunc_ln1812_1_reg_1021),
    .HwReg_layerEnable_val16(trunc_ln1812_reg_1016),
    .HwReg_layerEnableFlag_0_val(HwReg_layerEnableFlag_1_reg_1151),
    .HwReg_layerEnableFlag_1_val(HwReg_layerEnableFlag_reg_1156),
    .HwReg_layerEnableFlag_2_val(HwReg_layerEnableFlag_2_reg_1121),
    .HwReg_layerStartX_1_val17(HwReg_layerStartX_reg_1181),
    .HwReg_layerStartX_2_val18(HwReg_layerStartX_1_reg_1146),
    .HwReg_layerStartY_1_val19(HwReg_layerStartY_reg_1176),
    .HwReg_layerStartY_2_val20(HwReg_layerStartY_1_reg_1141),
    .HwReg_layerWidth_1_val(HwReg_layerWidth_reg_1171),
    .HwReg_layerWidth_2_val(HwReg_layerWidth_1_reg_1136),
    .HwReg_layerHeight_1_val(HwReg_layerHeight_reg_1166),
    .HwReg_layerHeight_2_val(HwReg_layerHeight_1_reg_1131),
    .HwReg_layerScaleFactor_1_val25(HwReg_layerScaleFactor_reg_1161),
    .HwReg_layerScaleFactor_2_val26(HwReg_layerScaleFactor_1_reg_1126),
    .s_axis_video_TDATA(s_axis_video_TDATA_int_regslice),
    .s_axis_video_TKEEP(s_axis_video_TKEEP_int_regslice),
    .s_axis_video_TSTRB(s_axis_video_TSTRB_int_regslice),
    .s_axis_video_TUSER(s_axis_video_TUSER_int_regslice),
    .s_axis_video_TLAST(s_axis_video_TLAST_int_regslice),
    .s_axis_video_TID(s_axis_video_TID_int_regslice),
    .s_axis_video_TDEST(s_axis_video_TDEST_int_regslice),
    .s_axis_video1_TDATA(s_axis_video1_TDATA_int_regslice),
    .s_axis_video1_TKEEP(s_axis_video1_TKEEP_int_regslice),
    .s_axis_video1_TSTRB(s_axis_video1_TSTRB_int_regslice),
    .s_axis_video1_TUSER(s_axis_video1_TUSER_int_regslice),
    .s_axis_video1_TLAST(s_axis_video1_TLAST_int_regslice),
    .s_axis_video1_TID(s_axis_video1_TID_int_regslice),
    .s_axis_video1_TDEST(s_axis_video1_TDEST_int_regslice),
    .s_axis_video2_TDATA(s_axis_video2_TDATA_int_regslice),
    .s_axis_video2_TKEEP(s_axis_video2_TKEEP_int_regslice),
    .s_axis_video2_TSTRB(s_axis_video2_TSTRB_int_regslice),
    .s_axis_video2_TUSER(s_axis_video2_TUSER_int_regslice),
    .s_axis_video2_TLAST(s_axis_video2_TLAST_int_regslice),
    .s_axis_video2_TID(s_axis_video2_TID_int_regslice),
    .s_axis_video2_TDEST(s_axis_video2_TDEST_int_regslice),
    .m_axis_video_TDATA(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDATA),
    .m_axis_video_TKEEP(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TKEEP),
    .m_axis_video_TSTRB(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TSTRB),
    .m_axis_video_TUSER(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TUSER),
    .m_axis_video_TLAST(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TLAST),
    .m_axis_video_TID(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TID),
    .m_axis_video_TDEST(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDEST),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .HwReg_layerEnable_val16_ap_vld(1'b1),
    .HwReg_layerStartX_1_val17_ap_vld(1'b1),
    .HwReg_layerStartX_2_val18_ap_vld(1'b1),
    .HwReg_layerStartY_1_val19_ap_vld(1'b1),
    .HwReg_layerStartY_2_val20_ap_vld(1'b1),
    .HwReg_layerScaleFactor_1_val25_ap_vld(1'b1),
    .HwReg_layerScaleFactor_2_val26_ap_vld(1'b1),
    .ap_start(grp_VMixHlsDataFlowFunction_fu_476_ap_start),
    .s_axis_video_TVALID(s_axis_video_TVALID_int_regslice),
    .s_axis_video_TREADY(grp_VMixHlsDataFlowFunction_fu_476_s_axis_video_TREADY),
    .HwReg_height_val_ap_vld(1'b1),
    .HwReg_width_val_ap_vld(1'b1),
    .HwReg_layerEnableFlag_0_val_ap_vld(1'b1),
    .s_axis_video1_TVALID(s_axis_video1_TVALID_int_regslice),
    .s_axis_video1_TREADY(grp_VMixHlsDataFlowFunction_fu_476_s_axis_video1_TREADY),
    .HwReg_layerHeight_1_val_ap_vld(1'b1),
    .HwReg_layerWidth_1_val_ap_vld(1'b1),
    .HwReg_layerEnableFlag_1_val_ap_vld(1'b1),
    .HwReg_background_Y_R_val12_ap_vld(1'b1),
    .HwReg_background_U_G_val13_ap_vld(1'b1),
    .HwReg_background_V_B_val14_ap_vld(1'b1),
    .s_axis_video2_TVALID(s_axis_video2_TVALID_int_regslice),
    .s_axis_video2_TREADY(grp_VMixHlsDataFlowFunction_fu_476_s_axis_video2_TREADY),
    .HwReg_layerHeight_2_val_ap_vld(1'b1),
    .HwReg_layerWidth_2_val_ap_vld(1'b1),
    .HwReg_layerEnableFlag_2_val_ap_vld(1'b1),
    .m_axis_video_TVALID(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID),
    .m_axis_video_TREADY(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TREADY),
    .ap_done(grp_VMixHlsDataFlowFunction_fu_476_ap_done),
    .ap_ready(grp_VMixHlsDataFlowFunction_fu_476_ap_ready),
    .ap_idle(grp_VMixHlsDataFlowFunction_fu_476_ap_idle),
    .ap_continue(grp_VMixHlsDataFlowFunction_fu_476_ap_continue)
);

main_design_v_mix_0_0_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .width(width),
    .height(height),
    .video_format(video_format),
    .background_Y_R(background_Y_R),
    .background_U_G(background_U_G),
    .background_V_B(background_V_B),
    .layerEnable(layerEnable),
    .layerAlpha_1(layerAlpha_1),
    .layerStartX_1(layerStartX_1),
    .layerStartY_1(layerStartY_1),
    .layerWidth_1(layerWidth_1),
    .layerStride_1(layerStride_1),
    .layerHeight_1(layerHeight_1),
    .layerScaleFactor_1(layerScaleFactor_1),
    .layerAlpha_2(layerAlpha_2),
    .layerStartX_2(layerStartX_2),
    .layerStartY_2(layerStartY_2),
    .layerWidth_2(layerWidth_2),
    .layerStride_2(layerStride_2),
    .layerHeight_2(layerHeight_2),
    .layerScaleFactor_2(layerScaleFactor_2),
    .reserve(reserve),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

(* dissolve_hierarchy = "yes" *) main_design_v_mix_0_0_sparsemux_7_2_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
sparsemux_7_2_16_1_1_U486(
    .din0(layerStartX_0),
    .din1(layerStartX_1),
    .din2(layerStartX_2),
    .def(HwReg_layerStartX_2_fu_626_p7),
    .sel(i7_fu_346),
    .dout(HwReg_layerStartX_2_fu_626_p9)
);

(* dissolve_hierarchy = "yes" *) main_design_v_mix_0_0_sparsemux_7_2_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
sparsemux_7_2_16_1_1_U487(
    .din0(layerStartY_0),
    .din1(layerStartY_1),
    .din2(layerStartY_2),
    .def(HwReg_layerStartY_2_fu_643_p7),
    .sel(i7_fu_346),
    .dout(HwReg_layerStartY_2_fu_643_p9)
);

(* dissolve_hierarchy = "yes" *) main_design_v_mix_0_0_sparsemux_7_2_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
sparsemux_7_2_16_1_1_U488(
    .din0(layerWidth_0),
    .din1(layerWidth_1_read_reg_1081),
    .din2(layerWidth_2_read_reg_1086),
    .def(tmp_s_fu_660_p7),
    .sel(i7_fu_346),
    .dout(tmp_s_fu_660_p9)
);

(* dissolve_hierarchy = "yes" *) main_design_v_mix_0_0_sparsemux_7_2_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
sparsemux_7_2_16_1_1_U489(
    .din0(layerHeight_0),
    .din1(layerHeight_1_read_reg_1096),
    .din2(layerHeight_2_read_reg_1101),
    .def(tmp_4_fu_677_p7),
    .sel(i7_fu_346),
    .dout(tmp_4_fu_677_p9)
);

(* dissolve_hierarchy = "yes" *) main_design_v_mix_0_0_sparsemux_7_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sparsemux_7_2_8_1_1_U490(
    .din0(layerScaleFactor_0),
    .din1(layerScaleFactor_1_read_reg_1111),
    .din2(layerScaleFactor_2_read_reg_1116),
    .def(HwReg_layerScaleFactor_2_fu_694_p7),
    .sel(i7_fu_346),
    .dout(HwReg_layerScaleFactor_2_fu_694_p9)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 24 ))
regslice_both_s_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int_regslice),
    .vld_out(s_axis_video_TVALID_int_regslice),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 24 ))
regslice_both_s_axis_video1_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TDATA),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_data_V_U_ack_in),
    .data_out(s_axis_video1_TDATA_int_regslice),
    .vld_out(s_axis_video1_TVALID_int_regslice),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_data_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video1_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TKEEP),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_keep_V_U_ack_in),
    .data_out(s_axis_video1_TKEEP_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_keep_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_keep_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video1_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TSTRB),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_strb_V_U_ack_in),
    .data_out(s_axis_video1_TSTRB_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_strb_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_strb_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video1_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TUSER),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_user_V_U_ack_in),
    .data_out(s_axis_video1_TUSER_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_user_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_user_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video1_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TLAST),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_last_V_U_ack_in),
    .data_out(s_axis_video1_TLAST_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_last_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_last_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video1_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TID),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_id_V_U_ack_in),
    .data_out(s_axis_video1_TID_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_id_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_id_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video1_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TDEST),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_dest_V_U_ack_in),
    .data_out(s_axis_video1_TDEST_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_dest_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_dest_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 24 ))
regslice_both_s_axis_video2_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video2_TDATA),
    .vld_in(s_axis_video2_TVALID),
    .ack_in(regslice_both_s_axis_video2_V_data_V_U_ack_in),
    .data_out(s_axis_video2_TDATA_int_regslice),
    .vld_out(s_axis_video2_TVALID_int_regslice),
    .ack_out(s_axis_video2_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video2_V_data_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video2_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video2_TKEEP),
    .vld_in(s_axis_video2_TVALID),
    .ack_in(regslice_both_s_axis_video2_V_keep_V_U_ack_in),
    .data_out(s_axis_video2_TKEEP_int_regslice),
    .vld_out(regslice_both_s_axis_video2_V_keep_V_U_vld_out),
    .ack_out(s_axis_video2_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video2_V_keep_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video2_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video2_TSTRB),
    .vld_in(s_axis_video2_TVALID),
    .ack_in(regslice_both_s_axis_video2_V_strb_V_U_ack_in),
    .data_out(s_axis_video2_TSTRB_int_regslice),
    .vld_out(regslice_both_s_axis_video2_V_strb_V_U_vld_out),
    .ack_out(s_axis_video2_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video2_V_strb_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video2_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video2_TUSER),
    .vld_in(s_axis_video2_TVALID),
    .ack_in(regslice_both_s_axis_video2_V_user_V_U_ack_in),
    .data_out(s_axis_video2_TUSER_int_regslice),
    .vld_out(regslice_both_s_axis_video2_V_user_V_U_vld_out),
    .ack_out(s_axis_video2_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video2_V_user_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video2_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video2_TLAST),
    .vld_in(s_axis_video2_TVALID),
    .ack_in(regslice_both_s_axis_video2_V_last_V_U_ack_in),
    .data_out(s_axis_video2_TLAST_int_regslice),
    .vld_out(regslice_both_s_axis_video2_V_last_V_U_vld_out),
    .ack_out(s_axis_video2_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video2_V_last_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video2_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video2_TID),
    .vld_in(s_axis_video2_TVALID),
    .ack_in(regslice_both_s_axis_video2_V_id_V_U_ack_in),
    .data_out(s_axis_video2_TID_int_regslice),
    .vld_out(regslice_both_s_axis_video2_V_id_V_U_vld_out),
    .ack_out(s_axis_video2_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video2_V_id_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video2_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video2_TDEST),
    .vld_in(s_axis_video2_TVALID),
    .ack_in(regslice_both_s_axis_video2_V_dest_V_U_ack_in),
    .data_out(s_axis_video2_TDEST_int_regslice),
    .vld_out(regslice_both_s_axis_video2_V_dest_V_U_vld_out),
    .ack_out(s_axis_video2_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video2_V_dest_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 24 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDATA),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID),
    .ack_in(m_axis_video_TREADY_int_regslice),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TKEEP),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TSTRB),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TUSER),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TLAST),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TID),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

main_design_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDEST),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done <= 1'b0;
        end else if ((grp_VMixHlsDataFlowFunction_fu_476_ap_done == 1'b1)) begin
            ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready <= 1'b0;
        end else if ((grp_VMixHlsDataFlowFunction_fu_476_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((ap_sync_grp_VMixHlsDataFlowFunction_fu_476_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg <= 1'b1;
        end else if ((grp_VMixHlsDataFlowFunction_fu_476_ap_ready == 1'b1)) begin
            grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i7_fu_346 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i7_fu_346 <= i_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        HwReg_layerEnableFlag_1_reg_1151 <= HwReg_layerEnableFlag_1_fu_788_p3;
        HwReg_layerEnableFlag_2_reg_1121 <= HwReg_layerEnableFlag_2_fu_740_p3;
        HwReg_layerEnableFlag_3_fu_294 <= HwReg_layerEnableFlag_2_fu_740_p3;
        HwReg_layerEnableFlag_4_fu_298 <= HwReg_layerEnableFlag_1_fu_788_p3;
        HwReg_layerEnableFlag_5_fu_302 <= HwReg_layerEnableFlag_fu_796_p3;
        HwReg_layerEnableFlag_reg_1156 <= HwReg_layerEnableFlag_fu_796_p3;
        HwReg_layerHeight_1_reg_1131 <= HwReg_layerHeight_1_fu_756_p3;
        HwReg_layerHeight_reg_1166 <= HwReg_layerHeight_fu_812_p3;
        HwReg_layerScaleFactor_1_reg_1126 <= HwReg_layerScaleFactor_1_fu_748_p3;
        HwReg_layerScaleFactor_reg_1161 <= HwReg_layerScaleFactor_fu_804_p3;
        HwReg_layerStartX_1_reg_1146 <= HwReg_layerStartX_1_fu_780_p3;
        HwReg_layerStartX_reg_1181 <= HwReg_layerStartX_fu_836_p3;
        HwReg_layerStartY_1_reg_1141 <= HwReg_layerStartY_1_fu_772_p3;
        HwReg_layerStartY_reg_1176 <= HwReg_layerStartY_fu_828_p3;
        HwReg_layerWidth_1_reg_1136 <= HwReg_layerWidth_1_fu_764_p3;
        HwReg_layerWidth_reg_1171 <= HwReg_layerWidth_fu_820_p3;
        empty_78_fu_310 <= HwReg_layerHeight_1_fu_756_p3;
        empty_79_fu_314 <= HwReg_layerWidth_1_fu_764_p3;
        empty_80_fu_318 <= HwReg_layerStartY_1_fu_772_p3;
        empty_81_fu_322 <= HwReg_layerStartX_1_fu_780_p3;
        empty_82_fu_326 <= HwReg_layerScaleFactor_fu_804_p3;
        empty_83_fu_330 <= HwReg_layerHeight_fu_812_p3;
        empty_84_fu_334 <= HwReg_layerWidth_fu_820_p3;
        empty_85_fu_338 <= HwReg_layerStartY_fu_828_p3;
        empty_86_fu_342 <= HwReg_layerStartX_fu_836_p3;
        empty_fu_306 <= HwReg_layerScaleFactor_1_fu_748_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        layerHeight_1_read_reg_1096 <= layerHeight_1;
        layerHeight_2_read_reg_1101 <= layerHeight_2;
        layerScaleFactor_1_read_reg_1111 <= layerScaleFactor_1;
        layerScaleFactor_2_read_reg_1116 <= layerScaleFactor_2;
        layerWidth_1_read_reg_1081 <= layerWidth_1;
        layerWidth_2_read_reg_1086 <= layerWidth_2;
        trunc_ln1812_1_reg_1021 <= trunc_ln1812_1_fu_559_p1;
        trunc_ln1812_2_reg_1026 <= trunc_ln1812_2_fu_563_p1;
        trunc_ln1812_3_reg_1031 <= trunc_ln1812_3_fu_567_p1;
        trunc_ln1812_4_reg_1036 <= trunc_ln1812_4_fu_571_p1;
        trunc_ln1812_5_reg_1041 <= trunc_ln1812_5_fu_575_p1;
        trunc_ln1812_reg_1016 <= trunc_ln1812_fu_555_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_VMixHlsDataFlowFunction_fu_476_ap_continue = 1'b1;
    end else begin
        grp_VMixHlsDataFlowFunction_fu_476_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_axis_video1_TREADY_int_regslice = grp_VMixHlsDataFlowFunction_fu_476_s_axis_video1_TREADY;
    end else begin
        s_axis_video1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_axis_video2_TREADY_int_regslice = grp_VMixHlsDataFlowFunction_fu_476_s_axis_video2_TREADY;
    end else begin
        s_axis_video2_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_axis_video_TREADY_int_regslice = grp_VMixHlsDataFlowFunction_fu_476_s_axis_video_TREADY;
    end else begin
        s_axis_video_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln2626_fu_850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_layerEnableFlag_1_fu_788_p3 = ((icmp_ln2629_fu_722_p2[0:0] == 1'b1) ? tobool_fu_715_p3 : HwReg_layerEnableFlag_4_fu_298);

assign HwReg_layerEnableFlag_2_fu_740_p3 = ((or_ln2629_fu_734_p2[0:0] == 1'b1) ? HwReg_layerEnableFlag_3_fu_294 : tobool_fu_715_p3);

assign HwReg_layerEnableFlag_fu_796_p3 = ((icmp_ln2629_1_fu_728_p2[0:0] == 1'b1) ? tobool_fu_715_p3 : HwReg_layerEnableFlag_5_fu_302);

assign HwReg_layerHeight_1_fu_756_p3 = ((or_ln2629_fu_734_p2[0:0] == 1'b1) ? empty_78_fu_310 : tmp_4_fu_677_p9);

assign HwReg_layerHeight_fu_812_p3 = ((icmp_ln2629_1_fu_728_p2[0:0] == 1'b1) ? tmp_4_fu_677_p9 : empty_83_fu_330);

assign HwReg_layerScaleFactor_1_fu_748_p3 = ((or_ln2629_fu_734_p2[0:0] == 1'b1) ? empty_fu_306 : HwReg_layerScaleFactor_2_fu_694_p9);

assign HwReg_layerScaleFactor_2_fu_694_p7 = 'bx;

assign HwReg_layerScaleFactor_fu_804_p3 = ((icmp_ln2629_1_fu_728_p2[0:0] == 1'b1) ? HwReg_layerScaleFactor_2_fu_694_p9 : empty_82_fu_326);

assign HwReg_layerStartX_1_fu_780_p3 = ((or_ln2629_fu_734_p2[0:0] == 1'b1) ? empty_81_fu_322 : HwReg_layerStartX_2_fu_626_p9);

assign HwReg_layerStartX_2_fu_626_p7 = 'bx;

assign HwReg_layerStartX_fu_836_p3 = ((icmp_ln2629_1_fu_728_p2[0:0] == 1'b1) ? HwReg_layerStartX_2_fu_626_p9 : empty_86_fu_342);

assign HwReg_layerStartY_1_fu_772_p3 = ((or_ln2629_fu_734_p2[0:0] == 1'b1) ? empty_80_fu_318 : HwReg_layerStartY_2_fu_643_p9);

assign HwReg_layerStartY_2_fu_643_p7 = 'bx;

assign HwReg_layerStartY_fu_828_p3 = ((icmp_ln2629_1_fu_728_p2[0:0] == 1'b1) ? HwReg_layerStartY_2_fu_643_p9 : empty_85_fu_338);

assign HwReg_layerWidth_1_fu_764_p3 = ((or_ln2629_fu_734_p2[0:0] == 1'b1) ? empty_79_fu_314 : tmp_s_fu_660_p9);

assign HwReg_layerWidth_fu_820_p3 = ((icmp_ln2629_1_fu_728_p2[0:0] == 1'b1) ? tmp_s_fu_660_p9 : empty_84_fu_334);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready & ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_VMixHlsDataFlowFunction_fu_476_ap_ready = (grp_VMixHlsDataFlowFunction_fu_476_ap_ready | ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready);

assign grp_VMixHlsDataFlowFunction_fu_476_ap_start = grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg;

assign grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TREADY = (m_axis_video_TREADY_int_regslice & ap_CS_fsm_state4);

assign i_fu_844_p2 = (i7_fu_346 + 2'd1);

assign icmp_ln2626_fu_850_p2 = ((i7_fu_346 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln2629_1_fu_728_p2 = ((i7_fu_346 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln2629_fu_722_p2 = ((i7_fu_346 == 2'd0) ? 1'b1 : 1'b0);

assign layerVideoFormat_address0 = 2'd0;

assign layerVideoFormat_address1 = 2'd0;

assign layerVideoFormat_ce0 = 1'b0;

assign layerVideoFormat_ce1 = 1'b0;

assign layerVideoFormat_d0 = 8'd0;

assign layerVideoFormat_d1 = 8'd0;

assign layerVideoFormat_we0 = 1'b0;

assign layerVideoFormat_we1 = 1'b0;

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

assign m_axis_video_TVALID_int_regslice = grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID;

assign or_ln2629_fu_734_p2 = (icmp_ln2629_fu_722_p2 | icmp_ln2629_1_fu_728_p2);

assign s_axis_video1_TREADY = regslice_both_s_axis_video1_V_data_V_U_ack_in;

assign s_axis_video2_TREADY = regslice_both_s_axis_video2_V_data_V_U_ack_in;

assign s_axis_video_TREADY = regslice_both_s_axis_video_V_data_V_U_ack_in;

assign tmp_4_fu_677_p7 = 'bx;

assign tmp_s_fu_660_p7 = 'bx;

assign tobool_fu_715_p3 = layerEnable[zext_ln2636_fu_711_p1];

assign trunc_ln1812_1_fu_559_p1 = background_V_B[7:0];

assign trunc_ln1812_2_fu_563_p1 = background_U_G[7:0];

assign trunc_ln1812_3_fu_567_p1 = background_Y_R[7:0];

assign trunc_ln1812_4_fu_571_p1 = width[11:0];

assign trunc_ln1812_5_fu_575_p1 = height[11:0];

assign trunc_ln1812_fu_555_p1 = layerEnable[2:0];

assign zext_ln2636_fu_711_p1 = i7_fu_346;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "main_design_v_mix_0_0_hls_deadlock_detector.vh"
// synthesis translate_on

reg find_kernel_block = 0;
// synthesis translate_off
`include "main_design_v_mix_0_0_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //main_design_v_mix_0_0_v_mix

