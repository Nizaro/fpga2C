// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_design_v_mix_0_0_entry_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        HwReg_layerEnable_val16,
        HwReg_layerEnable_val16_c12_din,
        HwReg_layerEnable_val16_c12_num_data_valid,
        HwReg_layerEnable_val16_c12_fifo_cap,
        HwReg_layerEnable_val16_c12_full_n,
        HwReg_layerEnable_val16_c12_write,
        HwReg_layerStartX_1_val17,
        HwReg_layerStartX_1_val17_c_din,
        HwReg_layerStartX_1_val17_c_num_data_valid,
        HwReg_layerStartX_1_val17_c_fifo_cap,
        HwReg_layerStartX_1_val17_c_full_n,
        HwReg_layerStartX_1_val17_c_write,
        HwReg_layerStartX_2_val18,
        HwReg_layerStartX_2_val18_c_din,
        HwReg_layerStartX_2_val18_c_num_data_valid,
        HwReg_layerStartX_2_val18_c_fifo_cap,
        HwReg_layerStartX_2_val18_c_full_n,
        HwReg_layerStartX_2_val18_c_write,
        HwReg_layerStartY_1_val19,
        HwReg_layerStartY_1_val19_c_din,
        HwReg_layerStartY_1_val19_c_num_data_valid,
        HwReg_layerStartY_1_val19_c_fifo_cap,
        HwReg_layerStartY_1_val19_c_full_n,
        HwReg_layerStartY_1_val19_c_write,
        HwReg_layerStartY_2_val20,
        HwReg_layerStartY_2_val20_c_din,
        HwReg_layerStartY_2_val20_c_num_data_valid,
        HwReg_layerStartY_2_val20_c_fifo_cap,
        HwReg_layerStartY_2_val20_c_full_n,
        HwReg_layerStartY_2_val20_c_write,
        HwReg_layerScaleFactor_1_val25,
        HwReg_layerScaleFactor_1_val25_c_din,
        HwReg_layerScaleFactor_1_val25_c_num_data_valid,
        HwReg_layerScaleFactor_1_val25_c_fifo_cap,
        HwReg_layerScaleFactor_1_val25_c_full_n,
        HwReg_layerScaleFactor_1_val25_c_write,
        HwReg_layerScaleFactor_2_val26,
        HwReg_layerScaleFactor_2_val26_c_din,
        HwReg_layerScaleFactor_2_val26_c_num_data_valid,
        HwReg_layerScaleFactor_2_val26_c_fifo_cap,
        HwReg_layerScaleFactor_2_val26_c_full_n,
        HwReg_layerScaleFactor_2_val26_c_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [2:0] HwReg_layerEnable_val16;
output  [2:0] HwReg_layerEnable_val16_c12_din;
input  [3:0] HwReg_layerEnable_val16_c12_num_data_valid;
input  [3:0] HwReg_layerEnable_val16_c12_fifo_cap;
input   HwReg_layerEnable_val16_c12_full_n;
output   HwReg_layerEnable_val16_c12_write;
input  [15:0] HwReg_layerStartX_1_val17;
output  [15:0] HwReg_layerStartX_1_val17_c_din;
input  [3:0] HwReg_layerStartX_1_val17_c_num_data_valid;
input  [3:0] HwReg_layerStartX_1_val17_c_fifo_cap;
input   HwReg_layerStartX_1_val17_c_full_n;
output   HwReg_layerStartX_1_val17_c_write;
input  [15:0] HwReg_layerStartX_2_val18;
output  [15:0] HwReg_layerStartX_2_val18_c_din;
input  [3:0] HwReg_layerStartX_2_val18_c_num_data_valid;
input  [3:0] HwReg_layerStartX_2_val18_c_fifo_cap;
input   HwReg_layerStartX_2_val18_c_full_n;
output   HwReg_layerStartX_2_val18_c_write;
input  [15:0] HwReg_layerStartY_1_val19;
output  [15:0] HwReg_layerStartY_1_val19_c_din;
input  [3:0] HwReg_layerStartY_1_val19_c_num_data_valid;
input  [3:0] HwReg_layerStartY_1_val19_c_fifo_cap;
input   HwReg_layerStartY_1_val19_c_full_n;
output   HwReg_layerStartY_1_val19_c_write;
input  [15:0] HwReg_layerStartY_2_val20;
output  [15:0] HwReg_layerStartY_2_val20_c_din;
input  [3:0] HwReg_layerStartY_2_val20_c_num_data_valid;
input  [3:0] HwReg_layerStartY_2_val20_c_fifo_cap;
input   HwReg_layerStartY_2_val20_c_full_n;
output   HwReg_layerStartY_2_val20_c_write;
input  [7:0] HwReg_layerScaleFactor_1_val25;
output  [7:0] HwReg_layerScaleFactor_1_val25_c_din;
input  [3:0] HwReg_layerScaleFactor_1_val25_c_num_data_valid;
input  [3:0] HwReg_layerScaleFactor_1_val25_c_fifo_cap;
input   HwReg_layerScaleFactor_1_val25_c_full_n;
output   HwReg_layerScaleFactor_1_val25_c_write;
input  [7:0] HwReg_layerScaleFactor_2_val26;
output  [7:0] HwReg_layerScaleFactor_2_val26_c_din;
input  [3:0] HwReg_layerScaleFactor_2_val26_c_num_data_valid;
input  [3:0] HwReg_layerScaleFactor_2_val26_c_fifo_cap;
input   HwReg_layerScaleFactor_2_val26_c_full_n;
output   HwReg_layerScaleFactor_2_val26_c_write;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    HwReg_layerEnable_val16_c12_blk_n;
reg    HwReg_layerStartX_1_val17_c_blk_n;
reg    HwReg_layerStartX_2_val18_c_blk_n;
reg    HwReg_layerStartY_1_val19_c_blk_n;
reg    HwReg_layerStartY_2_val20_c_blk_n;
reg    HwReg_layerScaleFactor_1_val25_c_blk_n;
reg    HwReg_layerScaleFactor_2_val26_c_blk_n;
reg    ap_block_state1;
reg    HwReg_layerScaleFactor_2_val26_c_write_local;
reg    HwReg_layerScaleFactor_1_val25_c_write_local;
reg    HwReg_layerStartY_2_val20_c_write_local;
reg    HwReg_layerStartY_1_val19_c_write_local;
reg    HwReg_layerStartX_2_val18_c_write_local;
reg    HwReg_layerStartX_1_val17_c_write_local;
reg    HwReg_layerEnable_val16_c12_write_local;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerEnable_val16_c12_blk_n = HwReg_layerEnable_val16_c12_full_n;
    end else begin
        HwReg_layerEnable_val16_c12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerEnable_val16_c12_write_local = 1'b1;
    end else begin
        HwReg_layerEnable_val16_c12_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerScaleFactor_1_val25_c_blk_n = HwReg_layerScaleFactor_1_val25_c_full_n;
    end else begin
        HwReg_layerScaleFactor_1_val25_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerScaleFactor_1_val25_c_write_local = 1'b1;
    end else begin
        HwReg_layerScaleFactor_1_val25_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerScaleFactor_2_val26_c_blk_n = HwReg_layerScaleFactor_2_val26_c_full_n;
    end else begin
        HwReg_layerScaleFactor_2_val26_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerScaleFactor_2_val26_c_write_local = 1'b1;
    end else begin
        HwReg_layerScaleFactor_2_val26_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerStartX_1_val17_c_blk_n = HwReg_layerStartX_1_val17_c_full_n;
    end else begin
        HwReg_layerStartX_1_val17_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerStartX_1_val17_c_write_local = 1'b1;
    end else begin
        HwReg_layerStartX_1_val17_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerStartX_2_val18_c_blk_n = HwReg_layerStartX_2_val18_c_full_n;
    end else begin
        HwReg_layerStartX_2_val18_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerStartX_2_val18_c_write_local = 1'b1;
    end else begin
        HwReg_layerStartX_2_val18_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerStartY_1_val19_c_blk_n = HwReg_layerStartY_1_val19_c_full_n;
    end else begin
        HwReg_layerStartY_1_val19_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerStartY_1_val19_c_write_local = 1'b1;
    end else begin
        HwReg_layerStartY_1_val19_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerStartY_2_val20_c_blk_n = HwReg_layerStartY_2_val20_c_full_n;
    end else begin
        HwReg_layerStartY_2_val20_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerStartY_2_val20_c_write_local = 1'b1;
    end else begin
        HwReg_layerStartY_2_val20_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_layerEnable_val16_c12_din = HwReg_layerEnable_val16;

assign HwReg_layerEnable_val16_c12_write = HwReg_layerEnable_val16_c12_write_local;

assign HwReg_layerScaleFactor_1_val25_c_din = HwReg_layerScaleFactor_1_val25;

assign HwReg_layerScaleFactor_1_val25_c_write = HwReg_layerScaleFactor_1_val25_c_write_local;

assign HwReg_layerScaleFactor_2_val26_c_din = HwReg_layerScaleFactor_2_val26;

assign HwReg_layerScaleFactor_2_val26_c_write = HwReg_layerScaleFactor_2_val26_c_write_local;

assign HwReg_layerStartX_1_val17_c_din = HwReg_layerStartX_1_val17;

assign HwReg_layerStartX_1_val17_c_write = HwReg_layerStartX_1_val17_c_write_local;

assign HwReg_layerStartX_2_val18_c_din = HwReg_layerStartX_2_val18;

assign HwReg_layerStartX_2_val18_c_write = HwReg_layerStartX_2_val18_c_write_local;

assign HwReg_layerStartY_1_val19_c_din = HwReg_layerStartY_1_val19;

assign HwReg_layerStartY_1_val19_c_write = HwReg_layerStartY_1_val19_c_write_local;

assign HwReg_layerStartY_2_val20_c_din = HwReg_layerStartY_2_val20;

assign HwReg_layerStartY_2_val20_c_write = HwReg_layerStartY_2_val20_c_write_local;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (1'b0 == HwReg_layerScaleFactor_2_val26_c_full_n) | (1'b0 == HwReg_layerScaleFactor_1_val25_c_full_n) | (1'b0 == HwReg_layerStartY_2_val20_c_full_n) | (1'b0 == HwReg_layerStartY_1_val19_c_full_n) | (1'b0 == HwReg_layerStartX_2_val18_c_full_n) | (1'b0 == HwReg_layerStartX_1_val17_c_full_n) | (1'b0 == HwReg_layerEnable_val16_c12_full_n) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign start_out = real_start;

endmodule //main_design_v_mix_0_0_entry_proc
