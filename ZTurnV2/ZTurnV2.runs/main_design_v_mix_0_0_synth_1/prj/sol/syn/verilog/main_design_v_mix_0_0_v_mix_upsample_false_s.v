// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_design_v_mix_0_0_v_mix_upsample_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcLayer2Rgb_dout,
        srcLayer2Rgb_num_data_valid,
        srcLayer2Rgb_fifo_cap,
        srcLayer2Rgb_empty_n,
        srcLayer2Rgb_read,
        HwReg_layerHeight_2_val_dout,
        HwReg_layerHeight_2_val_num_data_valid,
        HwReg_layerHeight_2_val_fifo_cap,
        HwReg_layerHeight_2_val_empty_n,
        HwReg_layerHeight_2_val_read,
        HwReg_layerWidth_2_val_dout,
        HwReg_layerWidth_2_val_num_data_valid,
        HwReg_layerWidth_2_val_fifo_cap,
        HwReg_layerWidth_2_val_empty_n,
        HwReg_layerWidth_2_val_read,
        HwReg_layerEnableFlag_2_val_dout,
        HwReg_layerEnableFlag_2_val_num_data_valid,
        HwReg_layerEnableFlag_2_val_fifo_cap,
        HwReg_layerEnableFlag_2_val_empty_n,
        HwReg_layerEnableFlag_2_val_read,
        srcLayer2x_din,
        srcLayer2x_num_data_valid,
        srcLayer2x_fifo_cap,
        srcLayer2x_full_n,
        srcLayer2x_write,
        HwReg_layerWidth_2_val_c_din,
        HwReg_layerWidth_2_val_c_num_data_valid,
        HwReg_layerWidth_2_val_c_fifo_cap,
        HwReg_layerWidth_2_val_c_full_n,
        HwReg_layerWidth_2_val_c_write,
        HwReg_layerHeight_2_val_c_din,
        HwReg_layerHeight_2_val_c_num_data_valid,
        HwReg_layerHeight_2_val_c_fifo_cap,
        HwReg_layerHeight_2_val_c_full_n,
        HwReg_layerHeight_2_val_c_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] srcLayer2Rgb_dout;
input  [2:0] srcLayer2Rgb_num_data_valid;
input  [2:0] srcLayer2Rgb_fifo_cap;
input   srcLayer2Rgb_empty_n;
output   srcLayer2Rgb_read;
input  [15:0] HwReg_layerHeight_2_val_dout;
input  [2:0] HwReg_layerHeight_2_val_num_data_valid;
input  [2:0] HwReg_layerHeight_2_val_fifo_cap;
input   HwReg_layerHeight_2_val_empty_n;
output   HwReg_layerHeight_2_val_read;
input  [15:0] HwReg_layerWidth_2_val_dout;
input  [2:0] HwReg_layerWidth_2_val_num_data_valid;
input  [2:0] HwReg_layerWidth_2_val_fifo_cap;
input   HwReg_layerWidth_2_val_empty_n;
output   HwReg_layerWidth_2_val_read;
input  [0:0] HwReg_layerEnableFlag_2_val_dout;
input  [2:0] HwReg_layerEnableFlag_2_val_num_data_valid;
input  [2:0] HwReg_layerEnableFlag_2_val_fifo_cap;
input   HwReg_layerEnableFlag_2_val_empty_n;
output   HwReg_layerEnableFlag_2_val_read;
output  [23:0] srcLayer2x_din;
input  [2:0] srcLayer2x_num_data_valid;
input  [2:0] srcLayer2x_fifo_cap;
input   srcLayer2x_full_n;
output   srcLayer2x_write;
output  [15:0] HwReg_layerWidth_2_val_c_din;
input  [2:0] HwReg_layerWidth_2_val_c_num_data_valid;
input  [2:0] HwReg_layerWidth_2_val_c_fifo_cap;
input   HwReg_layerWidth_2_val_c_full_n;
output   HwReg_layerWidth_2_val_c_write;
output  [15:0] HwReg_layerHeight_2_val_c_din;
input  [2:0] HwReg_layerHeight_2_val_c_num_data_valid;
input  [2:0] HwReg_layerHeight_2_val_c_fifo_cap;
input   HwReg_layerHeight_2_val_c_full_n;
output   HwReg_layerHeight_2_val_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcLayer2Rgb_read;
reg srcLayer2x_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    HwReg_layerHeight_2_val_blk_n;
reg    HwReg_layerWidth_2_val_blk_n;
reg    HwReg_layerEnableFlag_2_val_blk_n;
reg    HwReg_layerWidth_2_val_c_blk_n;
reg    HwReg_layerHeight_2_val_c_blk_n;
wire   [0:0] HwReg_layerEnableFlag_2_val_read_read_fu_92_p2;
reg   [0:0] HwReg_layerEnableFlag_2_val_read_reg_139;
reg    ap_block_state1;
wire   [11:0] empty_fu_107_p1;
reg   [11:0] empty_reg_143;
wire   [11:0] empty_75_fu_111_p1;
reg   [11:0] empty_75_reg_148;
wire    grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_start;
wire    grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_done;
wire    grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_idle;
wire    grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_ready;
wire    grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_srcLayer2Rgb_read;
wire   [23:0] grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_srcLayer2x_din;
wire    grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_srcLayer2x_write;
reg    grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln105_fu_123_p2;
wire    ap_CS_fsm_state3;
reg   [11:0] y_fu_60;
wire   [11:0] y_10_fu_128_p2;
reg    HwReg_layerHeight_2_val_read_local;
reg    HwReg_layerHeight_2_val_c_write_local;
reg    HwReg_layerWidth_2_val_read_local;
reg    HwReg_layerWidth_2_val_c_write_local;
reg    HwReg_layerEnableFlag_2_val_read_local;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_start_reg = 1'b0;
#0 y_fu_60 = 12'd0;
end

main_design_v_mix_0_0_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2 grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_start),
    .ap_done(grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_done),
    .ap_idle(grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_idle),
    .ap_ready(grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_ready),
    .srcLayer2Rgb_dout(srcLayer2Rgb_dout),
    .srcLayer2Rgb_num_data_valid(3'd0),
    .srcLayer2Rgb_fifo_cap(3'd0),
    .srcLayer2Rgb_empty_n(srcLayer2Rgb_empty_n),
    .srcLayer2Rgb_read(grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_srcLayer2Rgb_read),
    .srcLayer2x_din(grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_srcLayer2x_din),
    .srcLayer2x_num_data_valid(3'd0),
    .srcLayer2x_fifo_cap(3'd0),
    .srcLayer2x_full_n(srcLayer2x_full_n),
    .srcLayer2x_write(grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_srcLayer2x_write),
    .empty(empty_75_reg_148)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ((1'd0 == HwReg_layerEnableFlag_2_val_read_reg_139) | (icmp_ln105_fu_123_p2 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_123_p2 == 1'd0) & (1'd1 == HwReg_layerEnableFlag_2_val_read_reg_139))) begin
            grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_start_reg <= 1'b1;
        end else if ((grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_ready == 1'b1)) begin
            grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'd1 == HwReg_layerEnableFlag_2_val_read_read_fu_92_p2))) begin
        y_fu_60 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_123_p2 == 1'd0) & (1'd1 == HwReg_layerEnableFlag_2_val_read_reg_139))) begin
        y_fu_60 <= y_10_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerEnableFlag_2_val_read_reg_139 <= HwReg_layerEnableFlag_2_val_dout;
        empty_75_reg_148 <= empty_75_fu_111_p1;
        empty_reg_143 <= empty_fu_107_p1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerEnableFlag_2_val_blk_n = HwReg_layerEnableFlag_2_val_empty_n;
    end else begin
        HwReg_layerEnableFlag_2_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerEnableFlag_2_val_read_local = 1'b1;
    end else begin
        HwReg_layerEnableFlag_2_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight_2_val_blk_n = HwReg_layerHeight_2_val_empty_n;
    end else begin
        HwReg_layerHeight_2_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight_2_val_c_blk_n = HwReg_layerHeight_2_val_c_full_n;
    end else begin
        HwReg_layerHeight_2_val_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight_2_val_c_write_local = 1'b1;
    end else begin
        HwReg_layerHeight_2_val_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight_2_val_read_local = 1'b1;
    end else begin
        HwReg_layerHeight_2_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth_2_val_blk_n = HwReg_layerWidth_2_val_empty_n;
    end else begin
        HwReg_layerWidth_2_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth_2_val_c_blk_n = HwReg_layerWidth_2_val_c_full_n;
    end else begin
        HwReg_layerWidth_2_val_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth_2_val_c_write_local = 1'b1;
    end else begin
        HwReg_layerWidth_2_val_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth_2_val_read_local = 1'b1;
    end else begin
        HwReg_layerWidth_2_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((1'd0 == HwReg_layerEnableFlag_2_val_read_reg_139) | (icmp_ln105_fu_123_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((1'd0 == HwReg_layerEnableFlag_2_val_read_reg_139) | (icmp_ln105_fu_123_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        srcLayer2Rgb_read = grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_srcLayer2Rgb_read;
    end else begin
        srcLayer2Rgb_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        srcLayer2x_write = grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_srcLayer2x_write;
    end else begin
        srcLayer2x_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((1'd0 == HwReg_layerEnableFlag_2_val_read_reg_139) | (icmp_ln105_fu_123_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_layerEnableFlag_2_val_read = HwReg_layerEnableFlag_2_val_read_local;

assign HwReg_layerEnableFlag_2_val_read_read_fu_92_p2 = HwReg_layerEnableFlag_2_val_dout;

assign HwReg_layerHeight_2_val_c_din = HwReg_layerHeight_2_val_dout;

assign HwReg_layerHeight_2_val_c_write = HwReg_layerHeight_2_val_c_write_local;

assign HwReg_layerHeight_2_val_read = HwReg_layerHeight_2_val_read_local;

assign HwReg_layerWidth_2_val_c_din = HwReg_layerWidth_2_val_dout;

assign HwReg_layerWidth_2_val_c_write = HwReg_layerWidth_2_val_c_write_local;

assign HwReg_layerWidth_2_val_read = HwReg_layerWidth_2_val_read_local;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == HwReg_layerHeight_2_val_c_full_n) | (1'b0 == HwReg_layerWidth_2_val_c_full_n) | (1'b0 == HwReg_layerEnableFlag_2_val_empty_n) | (1'b0 == HwReg_layerWidth_2_val_empty_n) | (1'b0 == HwReg_layerHeight_2_val_empty_n) | (ap_done_reg == 1'b1));
end

assign empty_75_fu_111_p1 = HwReg_layerWidth_2_val_dout[11:0];

assign empty_fu_107_p1 = HwReg_layerHeight_2_val_dout[11:0];

assign grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_start = grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_ap_start_reg;

assign icmp_ln105_fu_123_p2 = ((y_fu_60 == empty_reg_143) ? 1'b1 : 1'b0);

assign srcLayer2x_din = grp_v_mix_upsample_false_Pipeline_VITIS_LOOP_107_2_fu_98_srcLayer2x_din;

assign y_10_fu_128_p2 = (y_fu_60 + 12'd1);

endmodule //main_design_v_mix_0_0_v_mix_upsample_false_s
