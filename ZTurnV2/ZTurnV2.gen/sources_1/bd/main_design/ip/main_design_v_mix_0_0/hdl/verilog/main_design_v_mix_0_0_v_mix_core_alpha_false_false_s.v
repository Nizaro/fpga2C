// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_design_v_mix_0_0_v_mix_core_alpha_false_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        outLayer0_dout,
        outLayer0_num_data_valid,
        outLayer0_fifo_cap,
        outLayer0_empty_n,
        outLayer0_read,
        srcLayer1x_dout,
        srcLayer1x_num_data_valid,
        srcLayer1x_fifo_cap,
        srcLayer1x_empty_n,
        srcLayer1x_read,
        HwReg_width_val,
        HwReg_height_val,
        HwReg_background_Y_R_val12,
        HwReg_background_U_G_val13,
        HwReg_background_V_B_val14,
        HwReg_layerEnable_val16_dout,
        HwReg_layerEnable_val16_num_data_valid,
        HwReg_layerEnable_val16_fifo_cap,
        HwReg_layerEnable_val16_empty_n,
        HwReg_layerEnable_val16_read,
        HwReg_layerStartX_1_val17_dout,
        HwReg_layerStartX_1_val17_num_data_valid,
        HwReg_layerStartX_1_val17_fifo_cap,
        HwReg_layerStartX_1_val17_empty_n,
        HwReg_layerStartX_1_val17_read,
        HwReg_layerStartY_1_val19_dout,
        HwReg_layerStartY_1_val19_num_data_valid,
        HwReg_layerStartY_1_val19_fifo_cap,
        HwReg_layerStartY_1_val19_empty_n,
        HwReg_layerStartY_1_val19_read,
        HwReg_layerWidth_1_val_dout,
        HwReg_layerWidth_1_val_num_data_valid,
        HwReg_layerWidth_1_val_fifo_cap,
        HwReg_layerWidth_1_val_empty_n,
        HwReg_layerWidth_1_val_read,
        HwReg_layerHeight_1_val_dout,
        HwReg_layerHeight_1_val_num_data_valid,
        HwReg_layerHeight_1_val_fifo_cap,
        HwReg_layerHeight_1_val_empty_n,
        HwReg_layerHeight_1_val_read,
        HwReg_layerScaleFactor_1_val25_dout,
        HwReg_layerScaleFactor_1_val25_num_data_valid,
        HwReg_layerScaleFactor_1_val25_fifo_cap,
        HwReg_layerScaleFactor_1_val25_empty_n,
        HwReg_layerScaleFactor_1_val25_read,
        outLayer1_din,
        outLayer1_num_data_valid,
        outLayer1_fifo_cap,
        outLayer1_full_n,
        outLayer1_write,
        HwReg_layerEnable_val16_c_din,
        HwReg_layerEnable_val16_c_num_data_valid,
        HwReg_layerEnable_val16_c_fifo_cap,
        HwReg_layerEnable_val16_c_full_n,
        HwReg_layerEnable_val16_c_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] outLayer0_dout;
input  [2:0] outLayer0_num_data_valid;
input  [2:0] outLayer0_fifo_cap;
input   outLayer0_empty_n;
output   outLayer0_read;
input  [23:0] srcLayer1x_dout;
input  [2:0] srcLayer1x_num_data_valid;
input  [2:0] srcLayer1x_fifo_cap;
input   srcLayer1x_empty_n;
output   srcLayer1x_read;
input  [11:0] HwReg_width_val;
input  [11:0] HwReg_height_val;
input  [7:0] HwReg_background_Y_R_val12;
input  [7:0] HwReg_background_U_G_val13;
input  [7:0] HwReg_background_V_B_val14;
input  [2:0] HwReg_layerEnable_val16_dout;
input  [3:0] HwReg_layerEnable_val16_num_data_valid;
input  [3:0] HwReg_layerEnable_val16_fifo_cap;
input   HwReg_layerEnable_val16_empty_n;
output   HwReg_layerEnable_val16_read;
input  [15:0] HwReg_layerStartX_1_val17_dout;
input  [3:0] HwReg_layerStartX_1_val17_num_data_valid;
input  [3:0] HwReg_layerStartX_1_val17_fifo_cap;
input   HwReg_layerStartX_1_val17_empty_n;
output   HwReg_layerStartX_1_val17_read;
input  [15:0] HwReg_layerStartY_1_val19_dout;
input  [3:0] HwReg_layerStartY_1_val19_num_data_valid;
input  [3:0] HwReg_layerStartY_1_val19_fifo_cap;
input   HwReg_layerStartY_1_val19_empty_n;
output   HwReg_layerStartY_1_val19_read;
input  [15:0] HwReg_layerWidth_1_val_dout;
input  [2:0] HwReg_layerWidth_1_val_num_data_valid;
input  [2:0] HwReg_layerWidth_1_val_fifo_cap;
input   HwReg_layerWidth_1_val_empty_n;
output   HwReg_layerWidth_1_val_read;
input  [15:0] HwReg_layerHeight_1_val_dout;
input  [2:0] HwReg_layerHeight_1_val_num_data_valid;
input  [2:0] HwReg_layerHeight_1_val_fifo_cap;
input   HwReg_layerHeight_1_val_empty_n;
output   HwReg_layerHeight_1_val_read;
input  [7:0] HwReg_layerScaleFactor_1_val25_dout;
input  [3:0] HwReg_layerScaleFactor_1_val25_num_data_valid;
input  [3:0] HwReg_layerScaleFactor_1_val25_fifo_cap;
input   HwReg_layerScaleFactor_1_val25_empty_n;
output   HwReg_layerScaleFactor_1_val25_read;
output  [23:0] outLayer1_din;
input  [2:0] outLayer1_num_data_valid;
input  [2:0] outLayer1_fifo_cap;
input   outLayer1_full_n;
output   outLayer1_write;
output  [2:0] HwReg_layerEnable_val16_c_din;
input  [2:0] HwReg_layerEnable_val16_c_num_data_valid;
input  [2:0] HwReg_layerEnable_val16_c_fifo_cap;
input   HwReg_layerEnable_val16_c_full_n;
output   HwReg_layerEnable_val16_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg outLayer0_read;
reg srcLayer1x_read;
reg outLayer1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    HwReg_layerEnable_val16_blk_n;
reg    HwReg_layerStartX_1_val17_blk_n;
reg    HwReg_layerStartY_1_val19_blk_n;
reg    HwReg_layerWidth_1_val_blk_n;
reg    HwReg_layerHeight_1_val_blk_n;
reg    HwReg_layerScaleFactor_1_val25_blk_n;
reg    HwReg_layerEnable_val16_c_blk_n;
reg   [15:0] layerStartY_reg_303;
reg    ap_block_state1;
reg   [15:0] layerStartX_reg_309;
wire   [0:0] empty_fu_190_p1;
reg   [0:0] empty_reg_315;
wire   [15:0] shl_ln449_fu_198_p2;
reg   [15:0] shl_ln449_reg_320;
wire   [15:0] shl_ln450_fu_208_p2;
reg   [15:0] shl_ln450_reg_325;
reg   [0:0] tmp_7_reg_330;
wire    ap_CS_fsm_state2;
wire   [16:0] add60_i_fu_233_p2;
reg   [16:0] add60_i_reg_360;
wire   [16:0] add71_i_fu_245_p2;
reg   [16:0] add71_i_reg_365;
wire   [0:0] rev18_fu_278_p2;
reg   [0:0] rev18_reg_373;
wire    ap_CS_fsm_state3;
wire   [0:0] notrhs_i_fu_285_p2;
reg   [0:0] notrhs_i_reg_378;
wire    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start;
wire    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_done;
wire    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_idle;
wire    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_ready;
wire    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer0_read;
wire    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_srcLayer1x_read;
wire   [23:0] grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_din;
wire    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_write;
reg    grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg;
wire   [0:0] icmp_ln463_fu_254_p2;
wire    ap_CS_fsm_state4;
reg   [11:0] y_fu_92;
wire   [11:0] add_ln463_fu_259_p2;
reg    HwReg_layerScaleFactor_1_val25_read_local;
reg    HwReg_layerHeight_1_val_read_local;
reg    HwReg_layerWidth_1_val_read_local;
reg    HwReg_layerStartY_1_val19_read_local;
reg    HwReg_layerStartX_1_val17_read_local;
reg    HwReg_layerEnable_val16_read_local;
reg    HwReg_layerEnable_val16_c_write_local;
wire   [15:0] HwReg_layerScaleFactor_1_val25_readcast_fu_194_p1;
wire   [15:0] HwReg_layerScaleFactor_1_val25_readcast19_fu_204_p1;
wire   [16:0] layerHeight_cast_i_fu_230_p1;
wire   [16:0] hwReg_10_1_val_cast_i_fu_227_p1;
wire   [16:0] layerWidth_cast_i_fu_242_p1;
wire   [16:0] hwReg_9_1_val_cast_i_fu_239_p1;
wire   [15:0] zext_ln463_2_fu_269_p1;
wire   [0:0] ult_fu_273_p2;
wire   [16:0] zext_ln463_fu_265_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg = 1'b0;
#0 y_fu_92 = 12'd0;
end

main_design_v_mix_0_0_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3 grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start),
    .ap_done(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_done),
    .ap_idle(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_idle),
    .ap_ready(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_ready),
    .outLayer0_dout(outLayer0_dout),
    .outLayer0_num_data_valid(3'd0),
    .outLayer0_fifo_cap(3'd0),
    .outLayer0_empty_n(outLayer0_empty_n),
    .outLayer0_read(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer0_read),
    .srcLayer1x_dout(srcLayer1x_dout),
    .srcLayer1x_num_data_valid(3'd0),
    .srcLayer1x_fifo_cap(3'd0),
    .srcLayer1x_empty_n(srcLayer1x_empty_n),
    .srcLayer1x_read(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_srcLayer1x_read),
    .outLayer1_din(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_din),
    .outLayer1_num_data_valid(3'd0),
    .outLayer1_fifo_cap(3'd0),
    .outLayer1_full_n(outLayer1_full_n),
    .outLayer1_write(grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_write),
    .HwReg_width_val(HwReg_width_val),
    .HwReg_background_V_B_val14(HwReg_background_V_B_val14),
    .HwReg_background_U_G_val13(HwReg_background_U_G_val13),
    .HwReg_background_Y_R_val12(HwReg_background_Y_R_val12),
    .layerStartX(layerStartX_reg_309),
    .add71_i(add71_i_reg_365),
    .notrhs_i(notrhs_i_reg_378),
    .rev5(rev18_reg_373),
    .empty_58(tmp_7_reg_330),
    .empty(empty_reg_315)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_254_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_254_p2 == 1'd0))) begin
            grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg <= 1'b1;
        end else if ((grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_ready == 1'b1)) begin
            grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        y_fu_92 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_254_p2 == 1'd0))) begin
        y_fu_92 <= add_ln463_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add60_i_reg_360 <= add60_i_fu_233_p2;
        add71_i_reg_365 <= add71_i_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        empty_reg_315 <= empty_fu_190_p1;
        layerStartX_reg_309 <= HwReg_layerStartX_1_val17_dout;
        layerStartY_reg_303 <= HwReg_layerStartY_1_val19_dout;
        shl_ln449_reg_320 <= shl_ln449_fu_198_p2;
        shl_ln450_reg_325 <= shl_ln450_fu_208_p2;
        tmp_7_reg_330 <= HwReg_layerEnable_val16_dout[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        notrhs_i_reg_378 <= notrhs_i_fu_285_p2;
        rev18_reg_373 <= rev18_fu_278_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerEnable_val16_blk_n = HwReg_layerEnable_val16_empty_n;
    end else begin
        HwReg_layerEnable_val16_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerEnable_val16_c_blk_n = HwReg_layerEnable_val16_c_full_n;
    end else begin
        HwReg_layerEnable_val16_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerEnable_val16_c_write_local = 1'b1;
    end else begin
        HwReg_layerEnable_val16_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerEnable_val16_read_local = 1'b1;
    end else begin
        HwReg_layerEnable_val16_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight_1_val_blk_n = HwReg_layerHeight_1_val_empty_n;
    end else begin
        HwReg_layerHeight_1_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerHeight_1_val_read_local = 1'b1;
    end else begin
        HwReg_layerHeight_1_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerScaleFactor_1_val25_blk_n = HwReg_layerScaleFactor_1_val25_empty_n;
    end else begin
        HwReg_layerScaleFactor_1_val25_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerScaleFactor_1_val25_read_local = 1'b1;
    end else begin
        HwReg_layerScaleFactor_1_val25_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerStartX_1_val17_blk_n = HwReg_layerStartX_1_val17_empty_n;
    end else begin
        HwReg_layerStartX_1_val17_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerStartX_1_val17_read_local = 1'b1;
    end else begin
        HwReg_layerStartX_1_val17_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerStartY_1_val19_blk_n = HwReg_layerStartY_1_val19_empty_n;
    end else begin
        HwReg_layerStartY_1_val19_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerStartY_1_val19_read_local = 1'b1;
    end else begin
        HwReg_layerStartY_1_val19_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth_1_val_blk_n = HwReg_layerWidth_1_val_empty_n;
    end else begin
        HwReg_layerWidth_1_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        HwReg_layerWidth_1_val_read_local = 1'b1;
    end else begin
        HwReg_layerWidth_1_val_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_254_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_254_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outLayer0_read = grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer0_read;
    end else begin
        outLayer0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outLayer1_write = grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_write;
    end else begin
        outLayer1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        srcLayer1x_read = grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_srcLayer1x_read;
    end else begin
        srcLayer1x_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln463_fu_254_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_layerEnable_val16_c_din = HwReg_layerEnable_val16_dout;

assign HwReg_layerEnable_val16_c_write = HwReg_layerEnable_val16_c_write_local;

assign HwReg_layerEnable_val16_read = HwReg_layerEnable_val16_read_local;

assign HwReg_layerHeight_1_val_read = HwReg_layerHeight_1_val_read_local;

assign HwReg_layerScaleFactor_1_val25_read = HwReg_layerScaleFactor_1_val25_read_local;

assign HwReg_layerScaleFactor_1_val25_readcast19_fu_204_p1 = HwReg_layerScaleFactor_1_val25_dout;

assign HwReg_layerScaleFactor_1_val25_readcast_fu_194_p1 = HwReg_layerScaleFactor_1_val25_dout;

assign HwReg_layerStartX_1_val17_read = HwReg_layerStartX_1_val17_read_local;

assign HwReg_layerStartY_1_val19_read = HwReg_layerStartY_1_val19_read_local;

assign HwReg_layerWidth_1_val_read = HwReg_layerWidth_1_val_read_local;

assign add60_i_fu_233_p2 = (layerHeight_cast_i_fu_230_p1 + hwReg_10_1_val_cast_i_fu_227_p1);

assign add71_i_fu_245_p2 = (layerWidth_cast_i_fu_242_p1 + hwReg_9_1_val_cast_i_fu_239_p1);

assign add_ln463_fu_259_p2 = (y_fu_92 + 12'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == HwReg_layerEnable_val16_c_full_n) | (1'b0 == HwReg_layerScaleFactor_1_val25_empty_n) | (1'b0 == HwReg_layerHeight_1_val_empty_n) | (1'b0 == HwReg_layerWidth_1_val_empty_n) | (1'b0 == HwReg_layerStartY_1_val19_empty_n) | (1'b0 == HwReg_layerStartX_1_val17_empty_n) | (1'b0 == HwReg_layerEnable_val16_empty_n) | (ap_done_reg == 1'b1));
end

assign empty_fu_190_p1 = HwReg_layerEnable_val16_dout[0:0];

assign grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start = grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_ap_start_reg;

assign hwReg_10_1_val_cast_i_fu_227_p1 = layerStartY_reg_303;

assign hwReg_9_1_val_cast_i_fu_239_p1 = layerStartX_reg_309;

assign icmp_ln463_fu_254_p2 = ((y_fu_92 == HwReg_height_val) ? 1'b1 : 1'b0);

assign layerHeight_cast_i_fu_230_p1 = shl_ln449_reg_320;

assign layerWidth_cast_i_fu_242_p1 = shl_ln450_reg_325;

assign notrhs_i_fu_285_p2 = ((add60_i_reg_360 > zext_ln463_fu_265_p1) ? 1'b1 : 1'b0);

assign outLayer1_din = grp_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3_fu_170_outLayer1_din;

assign rev18_fu_278_p2 = (ult_fu_273_p2 ^ 1'd1);

assign shl_ln449_fu_198_p2 = HwReg_layerHeight_1_val_dout << HwReg_layerScaleFactor_1_val25_readcast_fu_194_p1;

assign shl_ln450_fu_208_p2 = HwReg_layerWidth_1_val_dout << HwReg_layerScaleFactor_1_val25_readcast19_fu_204_p1;

assign ult_fu_273_p2 = ((zext_ln463_2_fu_269_p1 < layerStartY_reg_303) ? 1'b1 : 1'b0);

assign zext_ln463_2_fu_269_p1 = y_fu_92;

assign zext_ln463_fu_265_p1 = y_fu_92;

endmodule //main_design_v_mix_0_0_v_mix_core_alpha_false_false_s
