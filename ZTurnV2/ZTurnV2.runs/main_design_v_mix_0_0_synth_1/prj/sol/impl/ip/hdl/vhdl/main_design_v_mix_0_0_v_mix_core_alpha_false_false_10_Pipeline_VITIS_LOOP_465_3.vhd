-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_design_v_mix_0_0_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outLayer1_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    outLayer1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer1_empty_n : IN STD_LOGIC;
    outLayer1_read : OUT STD_LOGIC;
    srcLayer2x_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    srcLayer2x_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    srcLayer2x_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    srcLayer2x_empty_n : IN STD_LOGIC;
    srcLayer2x_read : OUT STD_LOGIC;
    outLayer2_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    outLayer2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outLayer2_full_n : IN STD_LOGIC;
    outLayer2_write : OUT STD_LOGIC;
    hwReg_0_val : IN STD_LOGIC_VECTOR (11 downto 0);
    layerStartX : IN STD_LOGIC_VECTOR (15 downto 0);
    add71 : IN STD_LOGIC_VECTOR (16 downto 0);
    notrhs : IN STD_LOGIC_VECTOR (0 downto 0);
    rev5 : IN STD_LOGIC_VECTOR (0 downto 0);
    empty : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of main_design_v_mix_0_0_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln465_reg_217 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln476_4_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op38_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln465_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal outLayer2_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal srcLayer2x_blk_n : STD_LOGIC;
    signal outLayer1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal and_ln476_4_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_0_0_218_in_in_reg_125 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_0_0_218_in_in_reg_125 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125 : STD_LOGIC_VECTOR (23 downto 0);
    signal x_fu_66 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln465_fu_149_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_13 : STD_LOGIC_VECTOR (11 downto 0);
    signal outLayer1_read_local : STD_LOGIC;
    signal srcLayer2x_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal outLayer2_write_local : STD_LOGIC;
    signal zext_ln465_1_fu_159_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln477_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln465_fu_155_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln476_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln477_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln476_2_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln476_1_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln478_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_126 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component main_design_v_mix_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component main_design_v_mix_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_126)) then
                if (((ap_const_lv1_0 = and_ln476_4_reg_221) and (icmp_ln465_reg_217 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125 <= outLayer1_dout;
                elsif (((ap_const_lv1_1 = and_ln476_4_reg_221) and (icmp_ln465_reg_217 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125 <= srcLayer2x_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125 <= ap_phi_reg_pp0_iter1_p_0_0_0_218_in_in_reg_125;
                end if;
            end if; 
        end if;
    end process;

    x_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln465_fu_143_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_66 <= add_ln465_fu_149_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_66 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln476_4_reg_221 <= and_ln476_4_fu_199_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln465_reg_217 <= icmp_ln465_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_p_0_0_0_218_in_in_reg_125 <= ap_phi_reg_pp0_iter0_p_0_0_0_218_in_in_reg_125;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln465_fu_149_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_13) + unsigned(ap_const_lv12_1));
    and_ln476_1_fu_193_p2 <= (xor_ln477_fu_169_p2 and and_ln476_2_fu_187_p2);
    and_ln476_2_fu_187_p2 <= (empty and and_ln476_fu_181_p2);
    and_ln476_4_fu_199_p2 <= (icmp_ln478_fu_175_p2 and and_ln476_1_fu_193_p2);
    and_ln476_fu_181_p2 <= (rev5 and notrhs);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(outLayer1_empty_n, icmp_ln465_reg_217, srcLayer2x_empty_n, ap_predicate_op38_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (srcLayer2x_empty_n = ap_const_logic_0)) or ((icmp_ln465_reg_217 = ap_const_lv1_0) and (outLayer1_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(outLayer2_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (outLayer2_full_n = ap_const_logic_0);
    end process;


    ap_condition_126_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_126 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln465_fu_143_p2)
    begin
        if (((icmp_ln465_fu_143_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_p_0_0_0_218_in_in_reg_125 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op38_read_state2_assign_proc : process(icmp_ln465_reg_217, and_ln476_4_reg_221)
    begin
                ap_predicate_op38_read_state2 <= ((ap_const_lv1_1 = and_ln476_4_reg_221) and (icmp_ln465_reg_217 = ap_const_lv1_0));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_13_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_66, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_13 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_x_13 <= x_fu_66;
        end if; 
    end process;

    icmp_ln465_fu_143_p2 <= "1" when (ap_sig_allocacmp_x_13 = hwReg_0_val) else "0";
    icmp_ln477_fu_163_p2 <= "1" when (unsigned(zext_ln465_1_fu_159_p1) < unsigned(layerStartX)) else "0";
    icmp_ln478_fu_175_p2 <= "1" when (unsigned(add71) > unsigned(zext_ln465_fu_155_p1)) else "0";

    outLayer1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, outLayer1_empty_n, icmp_ln465_reg_217, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln465_reg_217 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outLayer1_blk_n <= outLayer1_empty_n;
        else 
            outLayer1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outLayer1_read <= outLayer1_read_local;

    outLayer1_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln465_reg_217, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln465_reg_217 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outLayer1_read_local <= ap_const_logic_1;
        else 
            outLayer1_read_local <= ap_const_logic_0;
        end if; 
    end process;


    outLayer2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, outLayer2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outLayer2_blk_n <= outLayer2_full_n;
        else 
            outLayer2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outLayer2_din <= ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125;
    outLayer2_write <= outLayer2_write_local;

    outLayer2_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outLayer2_write_local <= ap_const_logic_1;
        else 
            outLayer2_write_local <= ap_const_logic_0;
        end if; 
    end process;


    srcLayer2x_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, srcLayer2x_empty_n, ap_predicate_op38_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op38_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcLayer2x_blk_n <= srcLayer2x_empty_n;
        else 
            srcLayer2x_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    srcLayer2x_read <= srcLayer2x_read_local;

    srcLayer2x_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op38_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op38_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcLayer2x_read_local <= ap_const_logic_1;
        else 
            srcLayer2x_read_local <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln477_fu_169_p2 <= (icmp_ln477_fu_163_p2 xor ap_const_lv1_1);
    zext_ln465_1_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_13),16));
    zext_ln465_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_13),17));
end behav;
