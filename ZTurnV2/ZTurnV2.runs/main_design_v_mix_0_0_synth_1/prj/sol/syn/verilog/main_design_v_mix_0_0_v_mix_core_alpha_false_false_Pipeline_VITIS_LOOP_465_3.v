// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_design_v_mix_0_0_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        outLayer0_dout,
        outLayer0_num_data_valid,
        outLayer0_fifo_cap,
        outLayer0_empty_n,
        outLayer0_read,
        srcLayer1x_dout,
        srcLayer1x_num_data_valid,
        srcLayer1x_fifo_cap,
        srcLayer1x_empty_n,
        srcLayer1x_read,
        outLayer1_din,
        outLayer1_num_data_valid,
        outLayer1_fifo_cap,
        outLayer1_full_n,
        outLayer1_write,
        HwReg_width_val,
        HwReg_background_V_B_val14,
        HwReg_background_U_G_val13,
        HwReg_background_Y_R_val12,
        layerStartX,
        add71_i,
        notrhs_i,
        rev5,
        empty_58,
        empty
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] outLayer0_dout;
input  [2:0] outLayer0_num_data_valid;
input  [2:0] outLayer0_fifo_cap;
input   outLayer0_empty_n;
output   outLayer0_read;
input  [23:0] srcLayer1x_dout;
input  [2:0] srcLayer1x_num_data_valid;
input  [2:0] srcLayer1x_fifo_cap;
input   srcLayer1x_empty_n;
output   srcLayer1x_read;
output  [23:0] outLayer1_din;
input  [2:0] outLayer1_num_data_valid;
input  [2:0] outLayer1_fifo_cap;
input   outLayer1_full_n;
output   outLayer1_write;
input  [11:0] HwReg_width_val;
input  [7:0] HwReg_background_V_B_val14;
input  [7:0] HwReg_background_U_G_val13;
input  [7:0] HwReg_background_Y_R_val12;
input  [15:0] layerStartX;
input  [16:0] add71_i;
input  [0:0] notrhs_i;
input  [0:0] rev5;
input  [0:0] empty_58;
input  [0:0] empty;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln465_reg_388;
reg    ap_predicate_op44_read_state2;
reg   [0:0] and_ln476_3_reg_392;
reg    ap_predicate_op49_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln465_fu_236_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    outLayer1_blk_n;
wire    ap_block_pp0_stage0;
reg    srcLayer1x_blk_n;
reg    outLayer0_blk_n;
wire   [0:0] tmp_read_fu_92_p2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln465_reg_388_pp0_iter1_reg;
wire   [0:0] and_ln476_3_fu_292_p2;
reg   [0:0] and_ln476_3_reg_392_pp0_iter1_reg;
wire   [7:0] trunc_ln470_fu_303_p1;
wire   [7:0] trunc_ln482_fu_327_p1;
wire   [7:0] ap_phi_reg_pp0_iter0_p_0_0_0_220_i_reg_171;
reg   [7:0] ap_phi_reg_pp0_iter1_p_0_0_0_220_i_reg_171;
reg   [7:0] ap_phi_reg_pp0_iter2_p_0_0_0_220_i_reg_171;
wire   [7:0] ap_phi_reg_pp0_iter0_p_0_0_0_117_i_reg_180;
reg   [7:0] ap_phi_reg_pp0_iter1_p_0_0_0_117_i_reg_180;
reg   [7:0] ap_phi_reg_pp0_iter2_p_0_0_0_117_i_reg_180;
wire   [7:0] ap_phi_reg_pp0_iter0_p_0_0_014_i_reg_189;
reg   [7:0] ap_phi_reg_pp0_iter1_p_0_0_014_i_reg_189;
reg   [7:0] ap_phi_reg_pp0_iter2_p_0_0_014_i_reg_189;
reg   [7:0] ap_phi_mux_p_0_0_0_218_i_phi_fu_201_p4;
wire   [7:0] ap_phi_reg_pp0_iter0_p_0_0_0_218_i_reg_198;
reg   [7:0] ap_phi_reg_pp0_iter1_p_0_0_0_218_i_reg_198;
reg   [7:0] ap_phi_reg_pp0_iter2_p_0_0_0_218_i_reg_198;
reg   [7:0] ap_phi_mux_p_0_0_0_115_i_phi_fu_211_p4;
wire   [7:0] ap_phi_reg_pp0_iter0_p_0_0_0_115_i_reg_208;
reg   [7:0] ap_phi_reg_pp0_iter1_p_0_0_0_115_i_reg_208;
reg   [7:0] ap_phi_reg_pp0_iter2_p_0_0_0_115_i_reg_208;
reg   [7:0] ap_phi_mux_p_0_0_012_i_phi_fu_221_p4;
wire   [7:0] ap_phi_reg_pp0_iter0_p_0_0_012_i_reg_218;
reg   [7:0] ap_phi_reg_pp0_iter1_p_0_0_012_i_reg_218;
reg   [7:0] ap_phi_reg_pp0_iter2_p_0_0_012_i_reg_218;
reg   [11:0] x_fu_88;
wire   [11:0] add_ln465_fu_242_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_x_12;
reg    outLayer0_read_local;
reg    srcLayer1x_read_local;
wire   [23:0] or_ln493_6_i_fu_351_p4;
reg    ap_block_pp0_stage0_01001;
reg    outLayer1_write_local;
wire   [15:0] zext_ln465_1_fu_252_p1;
wire   [0:0] icmp_ln477_fu_256_p2;
wire   [16:0] zext_ln465_fu_248_p1;
wire   [0:0] and_ln476_fu_274_p2;
wire   [0:0] xor_ln477_fu_262_p2;
wire   [0:0] and_ln476_1_fu_280_p2;
wire   [0:0] and_ln476_2_fu_286_p2;
wire   [0:0] icmp_ln478_fu_268_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_160;
reg    ap_condition_162;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 x_fu_88 = 12'd0;
#0 ap_done_reg = 1'b0;
end

main_design_v_mix_0_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_160)) begin
        if (((icmp_ln465_fu_236_p2 == 1'd0) & (tmp_read_fu_92_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_0_0_014_i_reg_189 <= HwReg_background_Y_R_val12;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_0_0_014_i_reg_189 <= ap_phi_reg_pp0_iter0_p_0_0_014_i_reg_189;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_160)) begin
        if (((icmp_ln465_fu_236_p2 == 1'd0) & (tmp_read_fu_92_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_0_0_0_117_i_reg_180 <= HwReg_background_U_G_val13;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_0_0_0_117_i_reg_180 <= ap_phi_reg_pp0_iter0_p_0_0_0_117_i_reg_180;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_160)) begin
        if (((icmp_ln465_fu_236_p2 == 1'd0) & (tmp_read_fu_92_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_0_0_0_220_i_reg_171 <= HwReg_background_V_B_val14;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_0_0_0_220_i_reg_171 <= ap_phi_reg_pp0_iter0_p_0_0_0_220_i_reg_171;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if (((1'd1 == and_ln476_3_reg_392) & (icmp_ln465_reg_388 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_0_0_012_i_reg_218 <= trunc_ln482_fu_327_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_0_0_012_i_reg_218 <= ap_phi_reg_pp0_iter1_p_0_0_012_i_reg_218;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if (((empty == 1'd1) & (icmp_ln465_reg_388 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_0_0_014_i_reg_189 <= trunc_ln470_fu_303_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_0_0_014_i_reg_189 <= ap_phi_reg_pp0_iter1_p_0_0_014_i_reg_189;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if (((1'd1 == and_ln476_3_reg_392) & (icmp_ln465_reg_388 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_115_i_reg_208 <= {{srcLayer1x_dout[15:8]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_115_i_reg_208 <= ap_phi_reg_pp0_iter1_p_0_0_0_115_i_reg_208;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if (((empty == 1'd1) & (icmp_ln465_reg_388 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_117_i_reg_180 <= {{outLayer0_dout[15:8]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_117_i_reg_180 <= ap_phi_reg_pp0_iter1_p_0_0_0_117_i_reg_180;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if (((1'd1 == and_ln476_3_reg_392) & (icmp_ln465_reg_388 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_218_i_reg_198 <= {{srcLayer1x_dout[23:16]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_218_i_reg_198 <= ap_phi_reg_pp0_iter1_p_0_0_0_218_i_reg_198;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if (((empty == 1'd1) & (icmp_ln465_reg_388 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_220_i_reg_171 <= {{outLayer0_dout[23:16]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_220_i_reg_171 <= ap_phi_reg_pp0_iter1_p_0_0_0_220_i_reg_171;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln465_fu_236_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_fu_88 <= add_ln465_fu_242_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_88 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln476_3_reg_392 <= and_ln476_3_fu_292_p2;
        and_ln476_3_reg_392_pp0_iter1_reg <= and_ln476_3_reg_392;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln465_reg_388 <= icmp_ln465_fu_236_p2;
        icmp_ln465_reg_388_pp0_iter1_reg <= icmp_ln465_reg_388;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_012_i_reg_218 <= ap_phi_reg_pp0_iter0_p_0_0_012_i_reg_218;
        ap_phi_reg_pp0_iter1_p_0_0_0_115_i_reg_208 <= ap_phi_reg_pp0_iter0_p_0_0_0_115_i_reg_208;
        ap_phi_reg_pp0_iter1_p_0_0_0_218_i_reg_198 <= ap_phi_reg_pp0_iter0_p_0_0_0_218_i_reg_198;
    end
end

always @ (*) begin
    if (((icmp_ln465_fu_236_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln476_3_reg_392_pp0_iter1_reg) & (icmp_ln465_reg_388_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_012_i_phi_fu_221_p4 = ap_phi_reg_pp0_iter2_p_0_0_014_i_reg_189;
    end else begin
        ap_phi_mux_p_0_0_012_i_phi_fu_221_p4 = ap_phi_reg_pp0_iter2_p_0_0_012_i_reg_218;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln476_3_reg_392_pp0_iter1_reg) & (icmp_ln465_reg_388_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_115_i_phi_fu_211_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_117_i_reg_180;
    end else begin
        ap_phi_mux_p_0_0_0_115_i_phi_fu_211_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_115_i_reg_208;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln476_3_reg_392_pp0_iter1_reg) & (icmp_ln465_reg_388_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_218_i_phi_fu_201_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_220_i_reg_171;
    end else begin
        ap_phi_mux_p_0_0_0_218_i_phi_fu_201_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_218_i_reg_198;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_x_12 = 12'd0;
    end else begin
        ap_sig_allocacmp_x_12 = x_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op44_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outLayer0_blk_n = outLayer0_empty_n;
    end else begin
        outLayer0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op44_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outLayer0_read_local = 1'b1;
    end else begin
        outLayer0_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outLayer1_blk_n = outLayer1_full_n;
    end else begin
        outLayer1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outLayer1_write_local = 1'b1;
    end else begin
        outLayer1_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcLayer1x_blk_n = srcLayer1x_empty_n;
    end else begin
        srcLayer1x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcLayer1x_read_local = 1'b1;
    end else begin
        srcLayer1x_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln465_fu_242_p2 = (ap_sig_allocacmp_x_12 + 12'd1);

assign and_ln476_1_fu_280_p2 = (empty_58 & and_ln476_fu_274_p2);

assign and_ln476_2_fu_286_p2 = (xor_ln477_fu_262_p2 & and_ln476_1_fu_280_p2);

assign and_ln476_3_fu_292_p2 = (icmp_ln478_fu_268_p2 & and_ln476_2_fu_286_p2);

assign and_ln476_fu_274_p2 = (rev5 & notrhs_i);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op49_read_state2 == 1'b1) & (srcLayer1x_empty_n == 1'b0)) | ((ap_predicate_op44_read_state2 == 1'b1) & (outLayer0_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (outLayer1_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_160 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_162 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_012_i_reg_218 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_014_i_reg_189 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_115_i_reg_208 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_117_i_reg_180 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_218_i_reg_198 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_220_i_reg_171 = 'bx;

always @ (*) begin
    ap_predicate_op44_read_state2 = ((empty == 1'd1) & (icmp_ln465_reg_388 == 1'd0));
end

always @ (*) begin
    ap_predicate_op49_read_state2 = ((1'd1 == and_ln476_3_reg_392) & (icmp_ln465_reg_388 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign icmp_ln465_fu_236_p2 = ((ap_sig_allocacmp_x_12 == HwReg_width_val) ? 1'b1 : 1'b0);

assign icmp_ln477_fu_256_p2 = ((zext_ln465_1_fu_252_p1 < layerStartX) ? 1'b1 : 1'b0);

assign icmp_ln478_fu_268_p2 = ((add71_i > zext_ln465_fu_248_p1) ? 1'b1 : 1'b0);

assign or_ln493_6_i_fu_351_p4 = {{{ap_phi_mux_p_0_0_0_218_i_phi_fu_201_p4}, {ap_phi_mux_p_0_0_0_115_i_phi_fu_211_p4}}, {ap_phi_mux_p_0_0_012_i_phi_fu_221_p4}};

assign outLayer0_read = outLayer0_read_local;

assign outLayer1_din = or_ln493_6_i_fu_351_p4;

assign outLayer1_write = outLayer1_write_local;

assign srcLayer1x_read = srcLayer1x_read_local;

assign tmp_read_fu_92_p2 = empty;

assign trunc_ln470_fu_303_p1 = outLayer0_dout[7:0];

assign trunc_ln482_fu_327_p1 = srcLayer1x_dout[7:0];

assign xor_ln477_fu_262_p2 = (icmp_ln477_fu_256_p2 ^ 1'd1);

assign zext_ln465_1_fu_252_p1 = ap_sig_allocacmp_x_12;

assign zext_ln465_fu_248_p1 = ap_sig_allocacmp_x_12;

endmodule //main_design_v_mix_0_0_v_mix_core_alpha_false_false_Pipeline_VITIS_LOOP_465_3
