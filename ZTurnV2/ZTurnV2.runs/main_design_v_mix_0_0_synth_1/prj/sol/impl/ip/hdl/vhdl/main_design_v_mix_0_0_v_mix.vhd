-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_design_v_mix_0_0_v_mix is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video1_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    s_axis_video1_TVALID : IN STD_LOGIC;
    s_axis_video1_TREADY : OUT STD_LOGIC;
    s_axis_video1_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video1_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video1_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video1_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video1_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video2_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    s_axis_video2_TVALID : IN STD_LOGIC;
    s_axis_video2_TREADY : OUT STD_LOGIC;
    s_axis_video2_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video2_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video2_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video2_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video2_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    layerAlpha_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    layerStartX_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    layerStartY_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    layerWidth_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    layerHeight_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    layerScaleFactor_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    layerVideoFormat_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layerVideoFormat_ce0 : OUT STD_LOGIC;
    layerVideoFormat_we0 : OUT STD_LOGIC;
    layerVideoFormat_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    layerVideoFormat_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    layerVideoFormat_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layerVideoFormat_ce1 : OUT STD_LOGIC;
    layerVideoFormat_we1 : OUT STD_LOGIC;
    layerVideoFormat_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    layerVideoFormat_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    layerStride_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    K11 : IN STD_LOGIC_VECTOR (31 downto 0);
    K12 : IN STD_LOGIC_VECTOR (31 downto 0);
    K13 : IN STD_LOGIC_VECTOR (31 downto 0);
    K21 : IN STD_LOGIC_VECTOR (31 downto 0);
    K22 : IN STD_LOGIC_VECTOR (31 downto 0);
    K23 : IN STD_LOGIC_VECTOR (31 downto 0);
    K31 : IN STD_LOGIC_VECTOR (31 downto 0);
    K32 : IN STD_LOGIC_VECTOR (31 downto 0);
    K33 : IN STD_LOGIC_VECTOR (31 downto 0);
    ROffset : IN STD_LOGIC_VECTOR (31 downto 0);
    GOffset : IN STD_LOGIC_VECTOR (31 downto 0);
    BOffset : IN STD_LOGIC_VECTOR (31 downto 0);
    K11_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    K12_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    K13_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    K21_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    K22_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    K23_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    K31_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    K32_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    K33_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    YOffset : IN STD_LOGIC_VECTOR (31 downto 0);
    UOffset : IN STD_LOGIC_VECTOR (31 downto 0);
    VOffset : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of main_design_v_mix_0_0_v_mix is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "main_design_v_mix_0_0_v_mix,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.802000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=8375,HLS_SYN_LUT=10321,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal width : STD_LOGIC_VECTOR (15 downto 0);
    signal height : STD_LOGIC_VECTOR (15 downto 0);
    signal video_format : STD_LOGIC_VECTOR (15 downto 0);
    signal background_Y_R : STD_LOGIC_VECTOR (15 downto 0);
    signal background_U_G : STD_LOGIC_VECTOR (15 downto 0);
    signal background_V_B : STD_LOGIC_VECTOR (15 downto 0);
    signal layerEnable : STD_LOGIC_VECTOR (31 downto 0);
    signal layerAlpha_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerAlpha_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerStartX_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerStartX_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerStartY_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerStartY_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerWidth_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerWidth_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerHeight_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerHeight_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerScaleFactor_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal layerScaleFactor_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal layerStride_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerStride_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal reserve : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1812_fu_555_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1812_reg_1016 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1812_1_fu_559_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1812_1_reg_1021 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1812_2_fu_563_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1812_2_reg_1026 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1812_3_fu_567_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1812_3_reg_1031 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1812_4_fu_571_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1812_4_reg_1036 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1812_5_fu_575_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1812_5_reg_1041 : STD_LOGIC_VECTOR (11 downto 0);
    signal layerWidth_1_read_reg_1081 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerWidth_2_read_reg_1086 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerHeight_1_read_reg_1096 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerHeight_2_read_reg_1101 : STD_LOGIC_VECTOR (15 downto 0);
    signal layerScaleFactor_1_read_reg_1111 : STD_LOGIC_VECTOR (7 downto 0);
    signal layerScaleFactor_2_read_reg_1116 : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_layerEnableFlag_2_fu_740_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal HwReg_layerEnableFlag_2_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal HwReg_layerScaleFactor_1_fu_748_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_layerScaleFactor_1_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_layerHeight_1_fu_756_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerHeight_1_reg_1131 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerWidth_1_fu_764_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerWidth_1_reg_1136 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartY_1_fu_772_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartY_1_reg_1141 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartX_1_fu_780_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartX_1_reg_1146 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerEnableFlag_1_fu_788_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal HwReg_layerEnableFlag_1_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal HwReg_layerEnableFlag_fu_796_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal HwReg_layerEnableFlag_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal HwReg_layerScaleFactor_fu_804_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_layerScaleFactor_reg_1161 : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_layerHeight_fu_812_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerHeight_reg_1166 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerWidth_fu_820_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerWidth_reg_1171 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartY_fu_828_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartY_reg_1176 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartX_fu_836_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartX_reg_1181 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_VMixHlsDataFlowFunction_fu_476_ap_start : STD_LOGIC;
    signal grp_VMixHlsDataFlowFunction_fu_476_s_axis_video_TREADY : STD_LOGIC;
    signal grp_VMixHlsDataFlowFunction_fu_476_s_axis_video1_TREADY : STD_LOGIC;
    signal grp_VMixHlsDataFlowFunction_fu_476_s_axis_video2_TREADY : STD_LOGIC;
    signal grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID : STD_LOGIC;
    signal grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TREADY : STD_LOGIC;
    signal grp_VMixHlsDataFlowFunction_fu_476_ap_done : STD_LOGIC;
    signal grp_VMixHlsDataFlowFunction_fu_476_ap_ready : STD_LOGIC;
    signal grp_VMixHlsDataFlowFunction_fu_476_ap_idle : STD_LOGIC;
    signal grp_VMixHlsDataFlowFunction_fu_476_ap_continue : STD_LOGIC;
    signal grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done : STD_LOGIC := '0';
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_sync_grp_VMixHlsDataFlowFunction_fu_476_ap_ready : STD_LOGIC;
    signal HwReg_layerEnableFlag_3_fu_294 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal HwReg_layerEnableFlag_4_fu_298 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal HwReg_layerEnableFlag_5_fu_302 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal empty_fu_306 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal empty_78_fu_310 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal empty_79_fu_314 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal empty_80_fu_318 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal empty_81_fu_322 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal empty_82_fu_326 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal empty_83_fu_330 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal empty_84_fu_334 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal empty_85_fu_338 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal empty_86_fu_342 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal i7_fu_346 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i_fu_844_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_layerStartX_2_fu_626_p7 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartY_2_fu_643_p7 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_660_p7 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_677_p7 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerScaleFactor_2_fu_694_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2636_fu_711_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln2629_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2629_1_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2629_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool_fu_715_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal HwReg_layerScaleFactor_2_fu_694_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_677_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_660_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartY_2_fu_643_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_layerStartX_2_fu_626_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln2626_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_m_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal s_axis_video_TVALID_int_regslice : STD_LOGIC;
    signal s_axis_video_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_s_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_s_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video1_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal s_axis_video1_TVALID_int_regslice : STD_LOGIC;
    signal s_axis_video1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video1_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_s_axis_video1_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video1_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_s_axis_video1_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video1_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video1_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video1_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video1_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video1_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video1_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video1_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video1_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video1_V_dest_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video2_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal s_axis_video2_TVALID_int_regslice : STD_LOGIC;
    signal s_axis_video2_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video2_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_s_axis_video2_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video2_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_s_axis_video2_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video2_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video2_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video2_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video2_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video2_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video2_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video2_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video2_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video2_V_dest_V_U_ack_in : STD_LOGIC;
    signal m_axis_video_TVALID_int_regslice : STD_LOGIC;
    signal m_axis_video_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_m_axis_video_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal HwReg_layerStartX_2_fu_626_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_layerStartX_2_fu_626_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_layerStartX_2_fu_626_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_layerStartY_2_fu_643_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_layerStartY_2_fu_643_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_layerStartY_2_fu_643_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_660_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_660_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_660_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_677_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_677_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_677_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_layerScaleFactor_2_fu_694_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_layerScaleFactor_2_fu_694_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_layerScaleFactor_2_fu_694_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component main_design_v_mix_0_0_VMixHlsDataFlowFunction IS
    port (
        HwReg_width_val : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_val : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_background_Y_R_val12 : IN STD_LOGIC_VECTOR (7 downto 0);
        HwReg_background_U_G_val13 : IN STD_LOGIC_VECTOR (7 downto 0);
        HwReg_background_V_B_val14 : IN STD_LOGIC_VECTOR (7 downto 0);
        HwReg_layerEnable_val16 : IN STD_LOGIC_VECTOR (2 downto 0);
        HwReg_layerEnableFlag_0_val : IN STD_LOGIC_VECTOR (0 downto 0);
        HwReg_layerEnableFlag_1_val : IN STD_LOGIC_VECTOR (0 downto 0);
        HwReg_layerEnableFlag_2_val : IN STD_LOGIC_VECTOR (0 downto 0);
        HwReg_layerStartX_1_val17 : IN STD_LOGIC_VECTOR (15 downto 0);
        HwReg_layerStartX_2_val18 : IN STD_LOGIC_VECTOR (15 downto 0);
        HwReg_layerStartY_1_val19 : IN STD_LOGIC_VECTOR (15 downto 0);
        HwReg_layerStartY_2_val20 : IN STD_LOGIC_VECTOR (15 downto 0);
        HwReg_layerWidth_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        HwReg_layerWidth_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
        HwReg_layerHeight_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        HwReg_layerHeight_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
        HwReg_layerScaleFactor_1_val25 : IN STD_LOGIC_VECTOR (7 downto 0);
        HwReg_layerScaleFactor_2_val26 : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_video_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video1_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        s_axis_video1_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        s_axis_video1_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        s_axis_video1_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video1_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video1_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video2_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        s_axis_video2_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        s_axis_video2_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        s_axis_video2_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video2_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video2_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        HwReg_layerEnable_val16_ap_vld : IN STD_LOGIC;
        HwReg_layerStartX_1_val17_ap_vld : IN STD_LOGIC;
        HwReg_layerStartX_2_val18_ap_vld : IN STD_LOGIC;
        HwReg_layerStartY_1_val19_ap_vld : IN STD_LOGIC;
        HwReg_layerStartY_2_val20_ap_vld : IN STD_LOGIC;
        HwReg_layerScaleFactor_1_val25_ap_vld : IN STD_LOGIC;
        HwReg_layerScaleFactor_2_val26_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        s_axis_video_TVALID : IN STD_LOGIC;
        s_axis_video_TREADY : OUT STD_LOGIC;
        HwReg_height_val_ap_vld : IN STD_LOGIC;
        HwReg_width_val_ap_vld : IN STD_LOGIC;
        HwReg_layerEnableFlag_0_val_ap_vld : IN STD_LOGIC;
        s_axis_video1_TVALID : IN STD_LOGIC;
        s_axis_video1_TREADY : OUT STD_LOGIC;
        HwReg_layerHeight_1_val_ap_vld : IN STD_LOGIC;
        HwReg_layerWidth_1_val_ap_vld : IN STD_LOGIC;
        HwReg_layerEnableFlag_1_val_ap_vld : IN STD_LOGIC;
        HwReg_background_Y_R_val12_ap_vld : IN STD_LOGIC;
        HwReg_background_U_G_val13_ap_vld : IN STD_LOGIC;
        HwReg_background_V_B_val14_ap_vld : IN STD_LOGIC;
        s_axis_video2_TVALID : IN STD_LOGIC;
        s_axis_video2_TREADY : OUT STD_LOGIC;
        HwReg_layerHeight_2_val_ap_vld : IN STD_LOGIC;
        HwReg_layerWidth_2_val_ap_vld : IN STD_LOGIC;
        HwReg_layerEnableFlag_2_val_ap_vld : IN STD_LOGIC;
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component main_design_v_mix_0_0_sparsemux_7_2_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        def : IN STD_LOGIC_VECTOR (15 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component main_design_v_mix_0_0_sparsemux_7_2_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component main_design_v_mix_0_0_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        width : OUT STD_LOGIC_VECTOR (15 downto 0);
        height : OUT STD_LOGIC_VECTOR (15 downto 0);
        video_format : OUT STD_LOGIC_VECTOR (15 downto 0);
        background_Y_R : OUT STD_LOGIC_VECTOR (15 downto 0);
        background_U_G : OUT STD_LOGIC_VECTOR (15 downto 0);
        background_V_B : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerEnable : OUT STD_LOGIC_VECTOR (31 downto 0);
        layerAlpha_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerStartX_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerStartY_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerWidth_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerStride_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerHeight_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerScaleFactor_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        layerAlpha_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerStartX_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerStartY_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerWidth_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerStride_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerHeight_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        layerScaleFactor_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        reserve : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component main_design_v_mix_0_0_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_VMixHlsDataFlowFunction_fu_476 : component main_design_v_mix_0_0_VMixHlsDataFlowFunction
    port map (
        HwReg_width_val => trunc_ln1812_4_reg_1036,
        HwReg_height_val => trunc_ln1812_5_reg_1041,
        HwReg_background_Y_R_val12 => trunc_ln1812_3_reg_1031,
        HwReg_background_U_G_val13 => trunc_ln1812_2_reg_1026,
        HwReg_background_V_B_val14 => trunc_ln1812_1_reg_1021,
        HwReg_layerEnable_val16 => trunc_ln1812_reg_1016,
        HwReg_layerEnableFlag_0_val => HwReg_layerEnableFlag_1_reg_1151,
        HwReg_layerEnableFlag_1_val => HwReg_layerEnableFlag_reg_1156,
        HwReg_layerEnableFlag_2_val => HwReg_layerEnableFlag_2_reg_1121,
        HwReg_layerStartX_1_val17 => HwReg_layerStartX_reg_1181,
        HwReg_layerStartX_2_val18 => HwReg_layerStartX_1_reg_1146,
        HwReg_layerStartY_1_val19 => HwReg_layerStartY_reg_1176,
        HwReg_layerStartY_2_val20 => HwReg_layerStartY_1_reg_1141,
        HwReg_layerWidth_1_val => HwReg_layerWidth_reg_1171,
        HwReg_layerWidth_2_val => HwReg_layerWidth_1_reg_1136,
        HwReg_layerHeight_1_val => HwReg_layerHeight_reg_1166,
        HwReg_layerHeight_2_val => HwReg_layerHeight_1_reg_1131,
        HwReg_layerScaleFactor_1_val25 => HwReg_layerScaleFactor_reg_1161,
        HwReg_layerScaleFactor_2_val26 => HwReg_layerScaleFactor_1_reg_1126,
        s_axis_video_TDATA => s_axis_video_TDATA_int_regslice,
        s_axis_video_TKEEP => s_axis_video_TKEEP_int_regslice,
        s_axis_video_TSTRB => s_axis_video_TSTRB_int_regslice,
        s_axis_video_TUSER => s_axis_video_TUSER_int_regslice,
        s_axis_video_TLAST => s_axis_video_TLAST_int_regslice,
        s_axis_video_TID => s_axis_video_TID_int_regslice,
        s_axis_video_TDEST => s_axis_video_TDEST_int_regslice,
        s_axis_video1_TDATA => s_axis_video1_TDATA_int_regslice,
        s_axis_video1_TKEEP => s_axis_video1_TKEEP_int_regslice,
        s_axis_video1_TSTRB => s_axis_video1_TSTRB_int_regslice,
        s_axis_video1_TUSER => s_axis_video1_TUSER_int_regslice,
        s_axis_video1_TLAST => s_axis_video1_TLAST_int_regslice,
        s_axis_video1_TID => s_axis_video1_TID_int_regslice,
        s_axis_video1_TDEST => s_axis_video1_TDEST_int_regslice,
        s_axis_video2_TDATA => s_axis_video2_TDATA_int_regslice,
        s_axis_video2_TKEEP => s_axis_video2_TKEEP_int_regslice,
        s_axis_video2_TSTRB => s_axis_video2_TSTRB_int_regslice,
        s_axis_video2_TUSER => s_axis_video2_TUSER_int_regslice,
        s_axis_video2_TLAST => s_axis_video2_TLAST_int_regslice,
        s_axis_video2_TID => s_axis_video2_TID_int_regslice,
        s_axis_video2_TDEST => s_axis_video2_TDEST_int_regslice,
        m_axis_video_TDATA => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDATA,
        m_axis_video_TKEEP => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TKEEP,
        m_axis_video_TSTRB => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TSTRB,
        m_axis_video_TUSER => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TUSER,
        m_axis_video_TLAST => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TLAST,
        m_axis_video_TID => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TID,
        m_axis_video_TDEST => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDEST,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        HwReg_layerEnable_val16_ap_vld => ap_const_logic_1,
        HwReg_layerStartX_1_val17_ap_vld => ap_const_logic_1,
        HwReg_layerStartX_2_val18_ap_vld => ap_const_logic_1,
        HwReg_layerStartY_1_val19_ap_vld => ap_const_logic_1,
        HwReg_layerStartY_2_val20_ap_vld => ap_const_logic_1,
        HwReg_layerScaleFactor_1_val25_ap_vld => ap_const_logic_1,
        HwReg_layerScaleFactor_2_val26_ap_vld => ap_const_logic_1,
        ap_start => grp_VMixHlsDataFlowFunction_fu_476_ap_start,
        s_axis_video_TVALID => s_axis_video_TVALID_int_regslice,
        s_axis_video_TREADY => grp_VMixHlsDataFlowFunction_fu_476_s_axis_video_TREADY,
        HwReg_height_val_ap_vld => ap_const_logic_1,
        HwReg_width_val_ap_vld => ap_const_logic_1,
        HwReg_layerEnableFlag_0_val_ap_vld => ap_const_logic_1,
        s_axis_video1_TVALID => s_axis_video1_TVALID_int_regslice,
        s_axis_video1_TREADY => grp_VMixHlsDataFlowFunction_fu_476_s_axis_video1_TREADY,
        HwReg_layerHeight_1_val_ap_vld => ap_const_logic_1,
        HwReg_layerWidth_1_val_ap_vld => ap_const_logic_1,
        HwReg_layerEnableFlag_1_val_ap_vld => ap_const_logic_1,
        HwReg_background_Y_R_val12_ap_vld => ap_const_logic_1,
        HwReg_background_U_G_val13_ap_vld => ap_const_logic_1,
        HwReg_background_V_B_val14_ap_vld => ap_const_logic_1,
        s_axis_video2_TVALID => s_axis_video2_TVALID_int_regslice,
        s_axis_video2_TREADY => grp_VMixHlsDataFlowFunction_fu_476_s_axis_video2_TREADY,
        HwReg_layerHeight_2_val_ap_vld => ap_const_logic_1,
        HwReg_layerWidth_2_val_ap_vld => ap_const_logic_1,
        HwReg_layerEnableFlag_2_val_ap_vld => ap_const_logic_1,
        m_axis_video_TVALID => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID,
        m_axis_video_TREADY => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TREADY,
        ap_done => grp_VMixHlsDataFlowFunction_fu_476_ap_done,
        ap_ready => grp_VMixHlsDataFlowFunction_fu_476_ap_ready,
        ap_idle => grp_VMixHlsDataFlowFunction_fu_476_ap_idle,
        ap_continue => grp_VMixHlsDataFlowFunction_fu_476_ap_continue);

    CTRL_s_axi_U : component main_design_v_mix_0_0_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        width => width,
        height => height,
        video_format => video_format,
        background_Y_R => background_Y_R,
        background_U_G => background_U_G,
        background_V_B => background_V_B,
        layerEnable => layerEnable,
        layerAlpha_1 => layerAlpha_1,
        layerStartX_1 => layerStartX_1,
        layerStartY_1 => layerStartY_1,
        layerWidth_1 => layerWidth_1,
        layerStride_1 => layerStride_1,
        layerHeight_1 => layerHeight_1,
        layerScaleFactor_1 => layerScaleFactor_1,
        layerAlpha_2 => layerAlpha_2,
        layerStartX_2 => layerStartX_2,
        layerStartY_2 => layerStartY_2,
        layerWidth_2 => layerWidth_2,
        layerStride_2 => layerStride_2,
        layerHeight_2 => layerHeight_2,
        layerScaleFactor_2 => layerScaleFactor_2,
        reserve => reserve,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    sparsemux_7_2_16_1_1_U486 : component main_design_v_mix_0_0_sparsemux_7_2_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 16,
        CASE1 => "01",
        din1_WIDTH => 16,
        CASE2 => "10",
        din2_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => layerStartX_0,
        din1 => layerStartX_1,
        din2 => layerStartX_2,
        def => HwReg_layerStartX_2_fu_626_p7,
        sel => i7_fu_346,
        dout => HwReg_layerStartX_2_fu_626_p9);

    sparsemux_7_2_16_1_1_U487 : component main_design_v_mix_0_0_sparsemux_7_2_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 16,
        CASE1 => "01",
        din1_WIDTH => 16,
        CASE2 => "10",
        din2_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => layerStartY_0,
        din1 => layerStartY_1,
        din2 => layerStartY_2,
        def => HwReg_layerStartY_2_fu_643_p7,
        sel => i7_fu_346,
        dout => HwReg_layerStartY_2_fu_643_p9);

    sparsemux_7_2_16_1_1_U488 : component main_design_v_mix_0_0_sparsemux_7_2_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 16,
        CASE1 => "01",
        din1_WIDTH => 16,
        CASE2 => "10",
        din2_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => layerWidth_0,
        din1 => layerWidth_1_read_reg_1081,
        din2 => layerWidth_2_read_reg_1086,
        def => tmp_s_fu_660_p7,
        sel => i7_fu_346,
        dout => tmp_s_fu_660_p9);

    sparsemux_7_2_16_1_1_U489 : component main_design_v_mix_0_0_sparsemux_7_2_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 16,
        CASE1 => "01",
        din1_WIDTH => 16,
        CASE2 => "10",
        din2_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => layerHeight_0,
        din1 => layerHeight_1_read_reg_1096,
        din2 => layerHeight_2_read_reg_1101,
        def => tmp_4_fu_677_p7,
        sel => i7_fu_346,
        dout => tmp_4_fu_677_p9);

    sparsemux_7_2_8_1_1_U490 : component main_design_v_mix_0_0_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => layerScaleFactor_0,
        din1 => layerScaleFactor_1_read_reg_1111,
        din2 => layerScaleFactor_2_read_reg_1116,
        def => HwReg_layerScaleFactor_2_fu_694_p7,
        sel => i7_fu_346,
        dout => HwReg_layerScaleFactor_2_fu_694_p9);

    regslice_both_s_axis_video_V_data_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDATA,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_data_V_U_ack_in,
        data_out => s_axis_video_TDATA_int_regslice,
        vld_out => s_axis_video_TVALID_int_regslice,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_data_V_U_apdone_blk);

    regslice_both_s_axis_video_V_keep_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TKEEP,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_keep_V_U_ack_in,
        data_out => s_axis_video_TKEEP_int_regslice,
        vld_out => regslice_both_s_axis_video_V_keep_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_video_V_strb_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TSTRB,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_strb_V_U_ack_in,
        data_out => s_axis_video_TSTRB_int_regslice,
        vld_out => regslice_both_s_axis_video_V_strb_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_video_V_user_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TUSER,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_user_V_U_ack_in,
        data_out => s_axis_video_TUSER_int_regslice,
        vld_out => regslice_both_s_axis_video_V_user_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_user_V_U_apdone_blk);

    regslice_both_s_axis_video_V_last_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TLAST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_last_V_U_ack_in,
        data_out => s_axis_video_TLAST_int_regslice,
        vld_out => regslice_both_s_axis_video_V_last_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_last_V_U_apdone_blk);

    regslice_both_s_axis_video_V_id_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TID,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_id_V_U_ack_in,
        data_out => s_axis_video_TID_int_regslice,
        vld_out => regslice_both_s_axis_video_V_id_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_id_V_U_apdone_blk);

    regslice_both_s_axis_video_V_dest_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDEST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_dest_V_U_ack_in,
        data_out => s_axis_video_TDEST_int_regslice,
        vld_out => regslice_both_s_axis_video_V_dest_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_dest_V_U_apdone_blk);

    regslice_both_s_axis_video1_V_data_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video1_TDATA,
        vld_in => s_axis_video1_TVALID,
        ack_in => regslice_both_s_axis_video1_V_data_V_U_ack_in,
        data_out => s_axis_video1_TDATA_int_regslice,
        vld_out => s_axis_video1_TVALID_int_regslice,
        ack_out => s_axis_video1_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video1_V_data_V_U_apdone_blk);

    regslice_both_s_axis_video1_V_keep_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video1_TKEEP,
        vld_in => s_axis_video1_TVALID,
        ack_in => regslice_both_s_axis_video1_V_keep_V_U_ack_in,
        data_out => s_axis_video1_TKEEP_int_regslice,
        vld_out => regslice_both_s_axis_video1_V_keep_V_U_vld_out,
        ack_out => s_axis_video1_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video1_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_video1_V_strb_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video1_TSTRB,
        vld_in => s_axis_video1_TVALID,
        ack_in => regslice_both_s_axis_video1_V_strb_V_U_ack_in,
        data_out => s_axis_video1_TSTRB_int_regslice,
        vld_out => regslice_both_s_axis_video1_V_strb_V_U_vld_out,
        ack_out => s_axis_video1_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video1_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_video1_V_user_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video1_TUSER,
        vld_in => s_axis_video1_TVALID,
        ack_in => regslice_both_s_axis_video1_V_user_V_U_ack_in,
        data_out => s_axis_video1_TUSER_int_regslice,
        vld_out => regslice_both_s_axis_video1_V_user_V_U_vld_out,
        ack_out => s_axis_video1_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video1_V_user_V_U_apdone_blk);

    regslice_both_s_axis_video1_V_last_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video1_TLAST,
        vld_in => s_axis_video1_TVALID,
        ack_in => regslice_both_s_axis_video1_V_last_V_U_ack_in,
        data_out => s_axis_video1_TLAST_int_regslice,
        vld_out => regslice_both_s_axis_video1_V_last_V_U_vld_out,
        ack_out => s_axis_video1_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video1_V_last_V_U_apdone_blk);

    regslice_both_s_axis_video1_V_id_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video1_TID,
        vld_in => s_axis_video1_TVALID,
        ack_in => regslice_both_s_axis_video1_V_id_V_U_ack_in,
        data_out => s_axis_video1_TID_int_regslice,
        vld_out => regslice_both_s_axis_video1_V_id_V_U_vld_out,
        ack_out => s_axis_video1_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video1_V_id_V_U_apdone_blk);

    regslice_both_s_axis_video1_V_dest_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video1_TDEST,
        vld_in => s_axis_video1_TVALID,
        ack_in => regslice_both_s_axis_video1_V_dest_V_U_ack_in,
        data_out => s_axis_video1_TDEST_int_regslice,
        vld_out => regslice_both_s_axis_video1_V_dest_V_U_vld_out,
        ack_out => s_axis_video1_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video1_V_dest_V_U_apdone_blk);

    regslice_both_s_axis_video2_V_data_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video2_TDATA,
        vld_in => s_axis_video2_TVALID,
        ack_in => regslice_both_s_axis_video2_V_data_V_U_ack_in,
        data_out => s_axis_video2_TDATA_int_regslice,
        vld_out => s_axis_video2_TVALID_int_regslice,
        ack_out => s_axis_video2_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video2_V_data_V_U_apdone_blk);

    regslice_both_s_axis_video2_V_keep_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video2_TKEEP,
        vld_in => s_axis_video2_TVALID,
        ack_in => regslice_both_s_axis_video2_V_keep_V_U_ack_in,
        data_out => s_axis_video2_TKEEP_int_regslice,
        vld_out => regslice_both_s_axis_video2_V_keep_V_U_vld_out,
        ack_out => s_axis_video2_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video2_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_video2_V_strb_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video2_TSTRB,
        vld_in => s_axis_video2_TVALID,
        ack_in => regslice_both_s_axis_video2_V_strb_V_U_ack_in,
        data_out => s_axis_video2_TSTRB_int_regslice,
        vld_out => regslice_both_s_axis_video2_V_strb_V_U_vld_out,
        ack_out => s_axis_video2_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video2_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_video2_V_user_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video2_TUSER,
        vld_in => s_axis_video2_TVALID,
        ack_in => regslice_both_s_axis_video2_V_user_V_U_ack_in,
        data_out => s_axis_video2_TUSER_int_regslice,
        vld_out => regslice_both_s_axis_video2_V_user_V_U_vld_out,
        ack_out => s_axis_video2_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video2_V_user_V_U_apdone_blk);

    regslice_both_s_axis_video2_V_last_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video2_TLAST,
        vld_in => s_axis_video2_TVALID,
        ack_in => regslice_both_s_axis_video2_V_last_V_U_ack_in,
        data_out => s_axis_video2_TLAST_int_regslice,
        vld_out => regslice_both_s_axis_video2_V_last_V_U_vld_out,
        ack_out => s_axis_video2_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video2_V_last_V_U_apdone_blk);

    regslice_both_s_axis_video2_V_id_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video2_TID,
        vld_in => s_axis_video2_TVALID,
        ack_in => regslice_both_s_axis_video2_V_id_V_U_ack_in,
        data_out => s_axis_video2_TID_int_regslice,
        vld_out => regslice_both_s_axis_video2_V_id_V_U_vld_out,
        ack_out => s_axis_video2_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video2_V_id_V_U_apdone_blk);

    regslice_both_s_axis_video2_V_dest_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video2_TDEST,
        vld_in => s_axis_video2_TVALID,
        ack_in => regslice_both_s_axis_video2_V_dest_V_U_ack_in,
        data_out => s_axis_video2_TDEST_int_regslice,
        vld_out => regslice_both_s_axis_video2_V_dest_V_U_vld_out,
        ack_out => s_axis_video2_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video2_V_dest_V_U_apdone_blk);

    regslice_both_m_axis_video_V_data_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDATA,
        vld_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID,
        ack_in => m_axis_video_TREADY_int_regslice,
        data_out => m_axis_video_TDATA,
        vld_out => regslice_both_m_axis_video_V_data_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_data_V_U_apdone_blk);

    regslice_both_m_axis_video_V_keep_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TKEEP,
        vld_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_video_TKEEP,
        vld_out => regslice_both_m_axis_video_V_keep_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_video_V_strb_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TSTRB,
        vld_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_video_TSTRB,
        vld_out => regslice_both_m_axis_video_V_strb_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_video_V_user_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TUSER,
        vld_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_user_V_U_ack_in_dummy,
        data_out => m_axis_video_TUSER,
        vld_out => regslice_both_m_axis_video_V_user_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_user_V_U_apdone_blk);

    regslice_both_m_axis_video_V_last_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TLAST,
        vld_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_last_V_U_ack_in_dummy,
        data_out => m_axis_video_TLAST,
        vld_out => regslice_both_m_axis_video_V_last_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_last_V_U_apdone_blk);

    regslice_both_m_axis_video_V_id_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TID,
        vld_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_id_V_U_ack_in_dummy,
        data_out => m_axis_video_TID,
        vld_out => regslice_both_m_axis_video_V_id_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_id_V_U_apdone_blk);

    regslice_both_m_axis_video_V_dest_V_U : component main_design_v_mix_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TDEST,
        vld_in => grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy,
        data_out => m_axis_video_TDEST,
        vld_out => regslice_both_m_axis_video_V_dest_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done <= ap_const_logic_0;
                elsif ((grp_VMixHlsDataFlowFunction_fu_476_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready <= ap_const_logic_0;
                elsif ((grp_VMixHlsDataFlowFunction_fu_476_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_sync_grp_VMixHlsDataFlowFunction_fu_476_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_VMixHlsDataFlowFunction_fu_476_ap_ready = ap_const_logic_1)) then 
                    grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i7_fu_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i7_fu_346 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i7_fu_346 <= i_fu_844_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                HwReg_layerEnableFlag_1_reg_1151 <= HwReg_layerEnableFlag_1_fu_788_p3;
                HwReg_layerEnableFlag_2_reg_1121 <= HwReg_layerEnableFlag_2_fu_740_p3;
                HwReg_layerEnableFlag_3_fu_294 <= HwReg_layerEnableFlag_2_fu_740_p3;
                HwReg_layerEnableFlag_4_fu_298 <= HwReg_layerEnableFlag_1_fu_788_p3;
                HwReg_layerEnableFlag_5_fu_302 <= HwReg_layerEnableFlag_fu_796_p3;
                HwReg_layerEnableFlag_reg_1156 <= HwReg_layerEnableFlag_fu_796_p3;
                HwReg_layerHeight_1_reg_1131 <= HwReg_layerHeight_1_fu_756_p3;
                HwReg_layerHeight_reg_1166 <= HwReg_layerHeight_fu_812_p3;
                HwReg_layerScaleFactor_1_reg_1126 <= HwReg_layerScaleFactor_1_fu_748_p3;
                HwReg_layerScaleFactor_reg_1161 <= HwReg_layerScaleFactor_fu_804_p3;
                HwReg_layerStartX_1_reg_1146 <= HwReg_layerStartX_1_fu_780_p3;
                HwReg_layerStartX_reg_1181 <= HwReg_layerStartX_fu_836_p3;
                HwReg_layerStartY_1_reg_1141 <= HwReg_layerStartY_1_fu_772_p3;
                HwReg_layerStartY_reg_1176 <= HwReg_layerStartY_fu_828_p3;
                HwReg_layerWidth_1_reg_1136 <= HwReg_layerWidth_1_fu_764_p3;
                HwReg_layerWidth_reg_1171 <= HwReg_layerWidth_fu_820_p3;
                empty_78_fu_310 <= HwReg_layerHeight_1_fu_756_p3;
                empty_79_fu_314 <= HwReg_layerWidth_1_fu_764_p3;
                empty_80_fu_318 <= HwReg_layerStartY_1_fu_772_p3;
                empty_81_fu_322 <= HwReg_layerStartX_1_fu_780_p3;
                empty_82_fu_326 <= HwReg_layerScaleFactor_fu_804_p3;
                empty_83_fu_330 <= HwReg_layerHeight_fu_812_p3;
                empty_84_fu_334 <= HwReg_layerWidth_fu_820_p3;
                empty_85_fu_338 <= HwReg_layerStartY_fu_828_p3;
                empty_86_fu_342 <= HwReg_layerStartX_fu_836_p3;
                empty_fu_306 <= HwReg_layerScaleFactor_1_fu_748_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                layerHeight_1_read_reg_1096 <= layerHeight_1;
                layerHeight_2_read_reg_1101 <= layerHeight_2;
                layerScaleFactor_1_read_reg_1111 <= layerScaleFactor_1;
                layerScaleFactor_2_read_reg_1116 <= layerScaleFactor_2;
                layerWidth_1_read_reg_1081 <= layerWidth_1;
                layerWidth_2_read_reg_1086 <= layerWidth_2;
                trunc_ln1812_1_reg_1021 <= trunc_ln1812_1_fu_559_p1;
                trunc_ln1812_2_reg_1026 <= trunc_ln1812_2_fu_563_p1;
                trunc_ln1812_3_reg_1031 <= trunc_ln1812_3_fu_567_p1;
                trunc_ln1812_4_reg_1036 <= trunc_ln1812_4_fu_571_p1;
                trunc_ln1812_5_reg_1041 <= trunc_ln1812_5_fu_575_p1;
                trunc_ln1812_reg_1016 <= trunc_ln1812_fu_555_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, icmp_ln2626_fu_850_p2, ap_CS_fsm_state5, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln2626_fu_850_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    HwReg_layerEnableFlag_1_fu_788_p3 <= 
        tobool_fu_715_p3 when (icmp_ln2629_fu_722_p2(0) = '1') else 
        HwReg_layerEnableFlag_4_fu_298;
    HwReg_layerEnableFlag_2_fu_740_p3 <= 
        HwReg_layerEnableFlag_3_fu_294 when (or_ln2629_fu_734_p2(0) = '1') else 
        tobool_fu_715_p3;
    HwReg_layerEnableFlag_fu_796_p3 <= 
        tobool_fu_715_p3 when (icmp_ln2629_1_fu_728_p2(0) = '1') else 
        HwReg_layerEnableFlag_5_fu_302;
    HwReg_layerHeight_1_fu_756_p3 <= 
        empty_78_fu_310 when (or_ln2629_fu_734_p2(0) = '1') else 
        tmp_4_fu_677_p9;
    HwReg_layerHeight_fu_812_p3 <= 
        tmp_4_fu_677_p9 when (icmp_ln2629_1_fu_728_p2(0) = '1') else 
        empty_83_fu_330;
    HwReg_layerScaleFactor_1_fu_748_p3 <= 
        empty_fu_306 when (or_ln2629_fu_734_p2(0) = '1') else 
        HwReg_layerScaleFactor_2_fu_694_p9;
    HwReg_layerScaleFactor_2_fu_694_p7 <= "XXXXXXXX";
    HwReg_layerScaleFactor_fu_804_p3 <= 
        HwReg_layerScaleFactor_2_fu_694_p9 when (icmp_ln2629_1_fu_728_p2(0) = '1') else 
        empty_82_fu_326;
    HwReg_layerStartX_1_fu_780_p3 <= 
        empty_81_fu_322 when (or_ln2629_fu_734_p2(0) = '1') else 
        HwReg_layerStartX_2_fu_626_p9;
    HwReg_layerStartX_2_fu_626_p7 <= "XXXXXXXXXXXXXXXX";
    HwReg_layerStartX_fu_836_p3 <= 
        HwReg_layerStartX_2_fu_626_p9 when (icmp_ln2629_1_fu_728_p2(0) = '1') else 
        empty_86_fu_342;
    HwReg_layerStartY_1_fu_772_p3 <= 
        empty_80_fu_318 when (or_ln2629_fu_734_p2(0) = '1') else 
        HwReg_layerStartY_2_fu_643_p9;
    HwReg_layerStartY_2_fu_643_p7 <= "XXXXXXXXXXXXXXXX";
    HwReg_layerStartY_fu_828_p3 <= 
        HwReg_layerStartY_2_fu_643_p9 when (icmp_ln2629_1_fu_728_p2(0) = '1') else 
        empty_85_fu_338;
    HwReg_layerWidth_1_fu_764_p3 <= 
        empty_79_fu_314 when (or_ln2629_fu_734_p2(0) = '1') else 
        tmp_s_fu_660_p9;
    HwReg_layerWidth_fu_820_p3 <= 
        tmp_s_fu_660_p9 when (icmp_ln2629_1_fu_728_p2(0) = '1') else 
        empty_84_fu_334;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready, ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready and ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_VMixHlsDataFlowFunction_fu_476_ap_ready <= (grp_VMixHlsDataFlowFunction_fu_476_ap_ready or ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_476_ap_ready);

    grp_VMixHlsDataFlowFunction_fu_476_ap_continue_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_VMixHlsDataFlowFunction_fu_476_ap_continue <= ap_const_logic_1;
        else 
            grp_VMixHlsDataFlowFunction_fu_476_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_VMixHlsDataFlowFunction_fu_476_ap_start <= grp_VMixHlsDataFlowFunction_fu_476_ap_start_reg;
    grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TREADY <= (m_axis_video_TREADY_int_regslice and ap_CS_fsm_state4);
    i_fu_844_p2 <= std_logic_vector(unsigned(i7_fu_346) + unsigned(ap_const_lv2_1));
    icmp_ln2626_fu_850_p2 <= "1" when (i7_fu_346 = ap_const_lv2_2) else "0";
    icmp_ln2629_1_fu_728_p2 <= "1" when (i7_fu_346 = ap_const_lv2_1) else "0";
    icmp_ln2629_fu_722_p2 <= "1" when (i7_fu_346 = ap_const_lv2_0) else "0";
    layerVideoFormat_address0 <= ap_const_lv2_0;
    layerVideoFormat_address1 <= ap_const_lv2_0;
    layerVideoFormat_ce0 <= ap_const_logic_0;
    layerVideoFormat_ce1 <= ap_const_logic_0;
    layerVideoFormat_d0 <= ap_const_lv8_0;
    layerVideoFormat_d1 <= ap_const_lv8_0;
    layerVideoFormat_we0 <= ap_const_logic_0;
    layerVideoFormat_we1 <= ap_const_logic_0;
    m_axis_video_TVALID <= regslice_both_m_axis_video_V_data_V_U_vld_out;
    m_axis_video_TVALID_int_regslice <= grp_VMixHlsDataFlowFunction_fu_476_m_axis_video_TVALID;
    or_ln2629_fu_734_p2 <= (icmp_ln2629_fu_722_p2 or icmp_ln2629_1_fu_728_p2);
    s_axis_video1_TREADY <= regslice_both_s_axis_video1_V_data_V_U_ack_in;

    s_axis_video1_TREADY_int_regslice_assign_proc : process(grp_VMixHlsDataFlowFunction_fu_476_s_axis_video1_TREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_axis_video1_TREADY_int_regslice <= grp_VMixHlsDataFlowFunction_fu_476_s_axis_video1_TREADY;
        else 
            s_axis_video1_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    s_axis_video2_TREADY <= regslice_both_s_axis_video2_V_data_V_U_ack_in;

    s_axis_video2_TREADY_int_regslice_assign_proc : process(grp_VMixHlsDataFlowFunction_fu_476_s_axis_video2_TREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_axis_video2_TREADY_int_regslice <= grp_VMixHlsDataFlowFunction_fu_476_s_axis_video2_TREADY;
        else 
            s_axis_video2_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    s_axis_video_TREADY <= regslice_both_s_axis_video_V_data_V_U_ack_in;

    s_axis_video_TREADY_int_regslice_assign_proc : process(grp_VMixHlsDataFlowFunction_fu_476_s_axis_video_TREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_axis_video_TREADY_int_regslice <= grp_VMixHlsDataFlowFunction_fu_476_s_axis_video_TREADY;
        else 
            s_axis_video_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_677_p7 <= "XXXXXXXXXXXXXXXX";
    tmp_s_fu_660_p7 <= "XXXXXXXXXXXXXXXX";
    tobool_fu_715_p3 <= layerEnable(to_integer(unsigned(zext_ln2636_fu_711_p1)) downto to_integer(unsigned(zext_ln2636_fu_711_p1))) when (to_integer(unsigned(zext_ln2636_fu_711_p1)) >= 0 and to_integer(unsigned(zext_ln2636_fu_711_p1)) <=31) else "-";
    trunc_ln1812_1_fu_559_p1 <= background_V_B(8 - 1 downto 0);
    trunc_ln1812_2_fu_563_p1 <= background_U_G(8 - 1 downto 0);
    trunc_ln1812_3_fu_567_p1 <= background_Y_R(8 - 1 downto 0);
    trunc_ln1812_4_fu_571_p1 <= width(12 - 1 downto 0);
    trunc_ln1812_5_fu_575_p1 <= height(12 - 1 downto 0);
    trunc_ln1812_fu_555_p1 <= layerEnable(3 - 1 downto 0);
    zext_ln2636_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i7_fu_346),32));
end behav;
