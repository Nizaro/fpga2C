// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_design_v_mix_0_0_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        outLayer1_dout,
        outLayer1_num_data_valid,
        outLayer1_fifo_cap,
        outLayer1_empty_n,
        outLayer1_read,
        srcLayer2x_dout,
        srcLayer2x_num_data_valid,
        srcLayer2x_fifo_cap,
        srcLayer2x_empty_n,
        srcLayer2x_read,
        outLayer2_din,
        outLayer2_num_data_valid,
        outLayer2_fifo_cap,
        outLayer2_full_n,
        outLayer2_write,
        hwReg_0_val,
        layerStartX,
        add71,
        notrhs,
        rev5,
        empty
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] outLayer1_dout;
input  [2:0] outLayer1_num_data_valid;
input  [2:0] outLayer1_fifo_cap;
input   outLayer1_empty_n;
output   outLayer1_read;
input  [23:0] srcLayer2x_dout;
input  [2:0] srcLayer2x_num_data_valid;
input  [2:0] srcLayer2x_fifo_cap;
input   srcLayer2x_empty_n;
output   srcLayer2x_read;
output  [23:0] outLayer2_din;
input  [2:0] outLayer2_num_data_valid;
input  [2:0] outLayer2_fifo_cap;
input   outLayer2_full_n;
output   outLayer2_write;
input  [11:0] hwReg_0_val;
input  [15:0] layerStartX;
input  [16:0] add71;
input  [0:0] notrhs;
input  [0:0] rev5;
input  [0:0] empty;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln465_reg_217;
reg   [0:0] and_ln476_4_reg_221;
reg    ap_predicate_op38_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln465_fu_143_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    outLayer2_blk_n;
wire    ap_block_pp0_stage0;
reg    srcLayer2x_blk_n;
reg    outLayer1_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] and_ln476_4_fu_199_p2;
wire   [23:0] ap_phi_reg_pp0_iter0_p_0_0_0_218_in_in_reg_125;
reg   [23:0] ap_phi_reg_pp0_iter1_p_0_0_0_218_in_in_reg_125;
reg   [23:0] ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125;
reg   [11:0] x_fu_66;
wire   [11:0] add_ln465_fu_149_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_x_13;
reg    outLayer1_read_local;
reg    srcLayer2x_read_local;
reg    ap_block_pp0_stage0_01001;
reg    outLayer2_write_local;
wire   [15:0] zext_ln465_1_fu_159_p1;
wire   [0:0] icmp_ln477_fu_163_p2;
wire   [16:0] zext_ln465_fu_155_p1;
wire   [0:0] and_ln476_fu_181_p2;
wire   [0:0] xor_ln477_fu_169_p2;
wire   [0:0] and_ln476_2_fu_187_p2;
wire   [0:0] and_ln476_1_fu_193_p2;
wire   [0:0] icmp_ln478_fu_175_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_126;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 x_fu_66 = 12'd0;
#0 ap_done_reg = 1'b0;
end

main_design_v_mix_0_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_126)) begin
        if (((1'd0 == and_ln476_4_reg_221) & (icmp_ln465_reg_217 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125 <= outLayer1_dout;
        end else if (((1'd1 == and_ln476_4_reg_221) & (icmp_ln465_reg_217 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125 <= srcLayer2x_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125 <= ap_phi_reg_pp0_iter1_p_0_0_0_218_in_in_reg_125;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln465_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_fu_66 <= add_ln465_fu_149_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_66 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln476_4_reg_221 <= and_ln476_4_fu_199_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln465_reg_217 <= icmp_ln465_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_0_218_in_in_reg_125 <= ap_phi_reg_pp0_iter0_p_0_0_0_218_in_in_reg_125;
    end
end

always @ (*) begin
    if (((icmp_ln465_fu_143_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_x_13 = 12'd0;
    end else begin
        ap_sig_allocacmp_x_13 = x_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln465_reg_217 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outLayer1_blk_n = outLayer1_empty_n;
    end else begin
        outLayer1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln465_reg_217 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outLayer1_read_local = 1'b1;
    end else begin
        outLayer1_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outLayer2_blk_n = outLayer2_full_n;
    end else begin
        outLayer2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outLayer2_write_local = 1'b1;
    end else begin
        outLayer2_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op38_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcLayer2x_blk_n = srcLayer2x_empty_n;
    end else begin
        srcLayer2x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op38_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcLayer2x_read_local = 1'b1;
    end else begin
        srcLayer2x_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln465_fu_149_p2 = (ap_sig_allocacmp_x_13 + 12'd1);

assign and_ln476_1_fu_193_p2 = (xor_ln477_fu_169_p2 & and_ln476_2_fu_187_p2);

assign and_ln476_2_fu_187_p2 = (empty & and_ln476_fu_181_p2);

assign and_ln476_4_fu_199_p2 = (icmp_ln478_fu_175_p2 & and_ln476_1_fu_193_p2);

assign and_ln476_fu_181_p2 = (rev5 & notrhs);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op38_read_state2 == 1'b1) & (srcLayer2x_empty_n == 1'b0)) | ((icmp_ln465_reg_217 == 1'd0) & (outLayer1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (outLayer2_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_126 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_0_218_in_in_reg_125 = 'bx;

always @ (*) begin
    ap_predicate_op38_read_state2 = ((1'd1 == and_ln476_4_reg_221) & (icmp_ln465_reg_217 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign icmp_ln465_fu_143_p2 = ((ap_sig_allocacmp_x_13 == hwReg_0_val) ? 1'b1 : 1'b0);

assign icmp_ln477_fu_163_p2 = ((zext_ln465_1_fu_159_p1 < layerStartX) ? 1'b1 : 1'b0);

assign icmp_ln478_fu_175_p2 = ((add71 > zext_ln465_fu_155_p1) ? 1'b1 : 1'b0);

assign outLayer1_read = outLayer1_read_local;

assign outLayer2_din = ap_phi_reg_pp0_iter2_p_0_0_0_218_in_in_reg_125;

assign outLayer2_write = outLayer2_write_local;

assign srcLayer2x_read = srcLayer2x_read_local;

assign xor_ln477_fu_169_p2 = (icmp_ln477_fu_163_p2 ^ 1'd1);

assign zext_ln465_1_fu_159_p1 = ap_sig_allocacmp_x_13;

assign zext_ln465_fu_155_p1 = ap_sig_allocacmp_x_13;

endmodule //main_design_v_mix_0_0_v_mix_core_alpha_false_false_10_Pipeline_VITIS_LOOP_465_3
